<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Selenium系列6-使用XPath定位元素</title>
    <link href="/2021/09/22/Selenium%E7%B3%BB%E5%88%976-%E4%BD%BF%E7%94%A8Xpath%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0/"/>
    <url>/2021/09/22/Selenium%E7%B3%BB%E5%88%976-%E4%BD%BF%E7%94%A8Xpath%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在进行自动化测试时，常会遇到素没有<code>id</code>，<code>name</code>，<code>class</code>属性，或者<code>id</code>，<code>name</code>，<code>class</code>属性是动态的，这时该如何定位呢？</p><p>通常会使用<code>XPath</code>和<code>css_selector</code>，这两种方式可以解决90%的元素定位</p><h2 id="使用Xpath定位"><a href="#使用Xpath定位" class="headerlink" title="使用Xpath定位"></a>使用Xpath定位</h2><p>XPath定位和Selenium基础元素定位方式一样，既可以获取单个元素，也可以获取多个元素集</p><p>获取一个元素对象：<br><code>driver.find_element_by_xpath(&quot;XPath路径表达式&quot;)</code></p><p>获取多个元素集：<br><code>driver.find_elements_by_xpath(&quot;XPath路径表达式&quot;)</code></p><h3 id="Xpath通过id，name，class属性定位"><a href="#Xpath通过id，name，class属性定位" class="headerlink" title="Xpath通过id，name，class属性定位"></a>Xpath通过id，name，class属性定位</h3><p>Xpath表达式：//标签名[@属性名=’属性值’]</p><p><strong>示例</strong></p><p>在百度首页中，使用Xpath定位搜索框</p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 打开浏览器</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开被测地址</span>url <span class="token operator">=</span> <span class="token string">"https://wwww.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment"># 用XPath通过id属性定位</span>el1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@id='kw']"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el1<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 用XPath通过name属性定位</span>el2 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@name='wd']"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el2<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 用XPath通过class属性定位</span>el3 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[@class='s_ipt']"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el3<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>输出结果</strong></p><p><img src="https://img.rockche.cn//image-20210923144812099.png" alt="image-20210923144812099"></p><blockquote><ul><li>不指定标签名称时，使用*号表示任意标签</li><li>指定标签名称时，使用对应标签名称</li></ul></blockquote><h3 id="Xpath通过标签中的其他属性定位"><a href="#Xpath通过标签中的其他属性定位" class="headerlink" title="Xpath通过标签中的其他属性定位"></a>Xpath通过标签中的其他属性定位</h3><p>如果元素没有id、name、class属性，可以通过其他属性进行定位</p><p><strong>示例</strong></p><p>使用Xpath通过其他属性对百度搜索框进行定位</p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 打开浏览器（获得浏览器对象）</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开页面</span>url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 用XPath通过maxlength属性定位  </span>el1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@maxlength='255']"</span><span class="token punctuation">)</span><span class="token comment"># 打印定位元素所在行的源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>el1<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5.用XPath通过autocomplete属性定位  </span>el2 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@autocomplete='off']"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el2<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 6.关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>输出结果</strong></p><p><img src="https://img.rockche.cn//image-20210924114737921.png" alt="image-20210924114737921"></p><h3 id="Xpath层级定位"><a href="#Xpath层级定位" class="headerlink" title="Xpath层级定位"></a>Xpath层级定位</h3><p>如果元素的属性无法直接定位到，我们可以通过它的父元素然后通过层级关系定位</p><p><strong>示例</strong></p><p>使用Xpath通过层级定位对百度首页搜索框</p><p><img src="https://img.rockche.cn//image-20210924144310196.png" alt="image-20210924144310196"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 打开浏览器（获得浏览器对象）</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开页面</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 用XPath通过层级定位</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//form[@id='form']/span/input"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 6.关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>输出结果</strong></p><p><img src="https://img.rockche.cn//image-20210924144342148.png" alt="image-20210924144342148"></p><h3 id="Xpath索引定位"><a href="#Xpath索引定位" class="headerlink" title="Xpath索引定位"></a>Xpath索引定位</h3><p>如果一个元素的标签和他兄弟元素的标签一样，这时候无法通过层级定位的。因为都是一个父亲生的，多胞胎兄弟。</p><p>虽然双胞胎兄弟很难识别，但是出生是有先后的，于是可以通过它在家里的排行老几定位到（这里索引是从1开始算起的，跟Python的索引不一样）</p><p><strong>示例</strong></p><p>使用xpath索引定位百度首页左上角的按钮</p><p><img src="https://img.rockche.cn//image-20210924150500970.png" alt="image-20210924150500970"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 打开浏览器（获得浏览器对象）</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开页面</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 用XPath通过索引定位 新闻按钮</span>el1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//div[@id='s-top-left']/a[@target='_blank'][1]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el1<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 用XPath通过索引定位 地图按钮</span>el2 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//div[@id='s-top-left']/a[@target='_blank'][3]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el2<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 用XPath通过索引定位 直播按钮</span>el3 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//div[@id='s-top-left']/a[@target='_blank'][4]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el3<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 6.关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>输出结果</strong></p><p><img src="https://img.rockche.cn//image-20210924150440204.png" alt="image-20210924150440204"></p><h3 id="Xpath逻辑定位"><a href="#Xpath逻辑定位" class="headerlink" title="Xpath逻辑定位"></a>Xpath逻辑定位</h3><p>当几个元素具有相同的属性和属性值时，就没办法用一个属性来通过Xpath进行定位了，需要使用多个属性进行定位</p><p>XPath逻辑定位说明：</p><ul><li><p>支持与（<code>and</code>）、或（<code>or</code>）、非（<code>not</code>）</p></li><li><p>一般用的比较多的是<code>and</code>运算，同时满足两个属性</p></li></ul><p><strong>示例</strong></p><p>使用Xpath运算符定位账号输入框</p><p><img src="https://img.rockche.cn//image-20210924151804220.png" alt="image-20210924151804220"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 打开浏览器（获得浏览器对象）</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开页面</span>url <span class="token operator">=</span> <span class="token string">"https://xiaojing0.com/admin/login"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 用XPath通过运算符定位</span>el1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@type='text' and @placeholder='账号']"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el1<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>输出结果</strong></p><p><img src="https://img.rockche.cn//image-20210924152520372.png" alt="image-20210924152520372"></p><h3 id="Xpath模糊匹配定位"><a href="#Xpath模糊匹配定位" class="headerlink" title="Xpath模糊匹配定位"></a>Xpath模糊匹配定位</h3><p>有些时候，标签元素的属性值太长，我们可以使用模糊匹配的定位方式来定位元素</p><p><strong>示例</strong></p><p>定位下面代码片段中的指定元素</p><div class="code-wrapper"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>zc<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>b1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>b2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Learning XML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>39.95<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>b3<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Learning HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>99.95<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>相对路径：模糊查询</p><ul><li>*：匹配任何元素节点</li><li>@*：匹配任何属性元素节点</li><li>node()：匹配任何类型的节点</li></ul></blockquote><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token comment"># 打开浏览器</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开注册A页面</span>url <span class="token operator">=</span> <span class="token string">"file:///"</span> <span class="token operator">+</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">"./demo1.html"</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># XPath模糊定位</span><span class="token comment"># 1 选取 bookstore 元素的所有子元素。</span>element_1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">"//bookstore/*"</span><span class="token punctuation">)</span><span class="token keyword">for</span> element <span class="token keyword">in</span> element_1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2 匹配绝对路径最外层元素</span>element_2 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>element_2<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3 选取页面中的所有元素。</span>element_3 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>element_3<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 4 选取所有带有属性的 title 元素。</span>element_4 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//title[@*]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>element_4<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5 匹配所有有属性的节点（属性模糊查询使用很少）。</span>element_5 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[@*]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>element_5<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 6 匹配bookstore节点所有孙子辈的id属性值为t2的title节点</span>textA <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//bookstore/node()/title[@id='t2']"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>textA<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="Xpath其他定位方式"><a href="#Xpath其他定位方式" class="headerlink" title="Xpath其他定位方式"></a>Xpath其他定位方式</h3><p><code>contains</code>关键字，是用于模糊查询定位，意思是属性中含有xxx的元素。</p><p>内容匹配可以是部分内容，也可以是全部内容。</p><p><strong>contains（text()，”xx”)</strong></p><p>模糊匹配text</p><p><strong>示例</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token comment"># 2.打开浏览器</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3.打开页面</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment"># 4.使用xpath模糊匹配，使用contains</span>el<span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//a[contains(text(), '新闻')]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5.关闭浏览器</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>contains（@属性名，”属性值”)</strong></p><p>模糊匹配某个属性</p><p><strong>示例</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token comment"># 2.打开浏览器</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3.打开页面</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment"># 4.使用xpath模糊匹配，使用contains</span>el<span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[contains(@class,'s_ip')]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5.关闭浏览器</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>starts-with</strong></p><p>模糊匹配以xx开头</p><p><strong>示例</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token comment"># 2.打开浏览器</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3.打开页面</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment"># 4.使用xpath模糊匹配，使用starts-with</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[starts-with(@class,'s_ip')]"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5.关闭浏览器</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>text()</strong></p><p>用于纯文字的查找</p><p><strong>示例</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">import</span> os<span class="token comment"># 2.打开浏览器</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3.打开页面</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment"># 4.使用xpath模糊匹配，使用starts-with</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[text()='hao123']"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"outerHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5.关闭浏览器</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/liuyuelinfighting/p/14943233.html">https://www.cnblogs.com/liuyuelinfighting/p/14943233.html</a></p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium系列5-XPath路径表达式</title>
    <link href="/2021/09/16/Selenium%E7%B3%BB%E5%88%975-XPath%E8%B7%AF%E5%BE%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/09/16/Selenium%E7%B3%BB%E5%88%975-XPath%E8%B7%AF%E5%BE%84%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="Xpath介绍"><a href="#Xpath介绍" class="headerlink" title="Xpath介绍"></a>Xpath介绍</h2><ul><li><p>XPath 使用路径表达式在 XML 文档中进行导航</p><ul><li>XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。</li></ul></li><li><p>XPath 包含一个标准函数库</p><ul><li>XPath 含有超过 100 个内建的函数。这些函数用于字符串值、数值、日期和时间比较、节点和 QName 处理、序列处理、逻辑值等等。</li></ul></li><li><p>XPath 是 XSLT 中的主要元素</p><ul><li><p>XPath 是 XSLT 标准中的主要元素。如果没有 XPath 方面的知识，就无法创建 XSLT 文档。</p><p>可以在《<a href="https://www.w3school.com.cn/xsl/index.asp">XSLT 教程</a>》中阅读更多的内容。</p><p>XQuery 和 XPointer 均构建于 XPath 表达式之上。XQuery 1.0 和 XPath 2.0 共享相同的数据模型，并支持相同的函数和运算符。</p><p>可以在《<a href="https://www.w3school.com.cn/xquery/index.asp">XQuery 教程</a>》中阅读更多有关 XQuery 的知识。</p></li></ul></li><li><p>XPath 是一个 W3C 标准</p><ul><li><p>XPath 于 1999 年 11 月 16 日 成为 W3C 标准。</p><p>XPath 被设计为供 XSLT、XPointer 以及其他 XML 解析软件使用。</p><p>可以在《<a href="https://www.w3school.com.cn/w3c/w3c_xpath.asp">W3C官方教程</a>》中阅读更多有关 XPath 标准的信息</p></li></ul></li></ul><h2 id="Xpath与HTML对比"><a href="#Xpath与HTML对比" class="headerlink" title="Xpath与HTML对比"></a>Xpath与HTML对比</h2><ul><li><p>XML是指扩展标记语言，是标准通用标记语言的一个子集；与HTML类似，但它并非HTML的替代品，它们为不同的目的而设计。</p></li><li><p>HTML被设计用来显示数据，其焦点是数据的外观。XML被设计为传输和存储数据，其焦点是数据的内容。</p></li></ul><h2 id="Xpath术语"><a href="#Xpath术语" class="headerlink" title="Xpath术语"></a>Xpath术语</h2><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>在 XPath 中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档（根）节点。XML 文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</p><p>请看下面这个 XML 文档：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>J K. Rowling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>上面的XML文档中的节点例子：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span> （文档节点）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>J K. Rowling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span> （元素节点）lang="en" （属性节点） <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="基本值（或称原子值，Atomic-value）"><a href="#基本值（或称原子值，Atomic-value）" class="headerlink" title="基本值（或称原子值，Atomic value）"></a>基本值（或称原子值，Atomic value）</h3><p>基本值是无父或者无子的节点</p><p>上面XML文档中基本值的例子：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">J K. Rowling"en"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="Xpath节点关系"><a href="#Xpath节点关系" class="headerlink" title="Xpath节点关系"></a>Xpath节点关系</h2><h3 id="父（Parent）"><a href="#父（Parent）" class="headerlink" title="父（Parent）"></a>父（Parent）</h3><p>每个元素以及属性都有一个父。</p><p>在下面的例子中，book 元素是 title、author、year 以及 price 元素的父：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>J K. Rowling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="子（Children）"><a href="#子（Children）" class="headerlink" title="子（Children）"></a>子（Children）</h3><p>元素节点可有零个、一个或多个子。</p><p>在下面的例子中，title、author、year 以及 price 元素都是 book 元素的子：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>J K. Rowling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="同胞（Sibling）"><a href="#同胞（Sibling）" class="headerlink" title="同胞（Sibling）"></a>同胞（Sibling）</h3><p>拥有相同的父的节点</p><p>在下面的例子中，title、author、year 以及 price 元素都是同胞：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>J K. Rowling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="先辈（Ancestor）"><a href="#先辈（Ancestor）" class="headerlink" title="先辈（Ancestor）"></a>先辈（Ancestor）</h3><p>某节点的父、父的父，等等。</p><p>在下面的例子中，title 元素的先辈是 book 元素和 bookstore 元素：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>J K. Rowling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="后代（Descendant）"><a href="#后代（Descendant）" class="headerlink" title="后代（Descendant）"></a>后代（Descendant）</h3><p>某个节点的子，子的子，等等。</p><p>在下面的例子中，bookstore 的后代是 book、title、author、year 以及 price 元素：</p><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>J K. Rowling<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">></span></span>2005<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Xpath语法"><a href="#Xpath语法" class="headerlink" title="Xpath语法"></a>Xpath语法</h2><p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p><h3 id="XML示例"><a href="#XML示例" class="headerlink" title="XML示例"></a>XML示例</h3><div class="code-wrapper"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Learning XML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>39.95<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h3><p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。 下面列出了最有用的路径表达式：</p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nodename</td><td align="left">选取此节点的所有子节点</td></tr><tr><td align="left">/</td><td align="left">从根节点选取（取子节点）</td></tr><tr><td align="left">//</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置（取子孙节点）</td></tr><tr><td align="left">.</td><td align="left">选取当前节点</td></tr><tr><td align="left">..</td><td align="left">选取当前节点的父节点</td></tr><tr><td align="left">@</td><td align="left">选取属性</td></tr></tbody></table><p>在下面的表格中，我们已列出了一些路径表达式以及表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">bookstore</td><td align="left">选取 bookstore 元素的所有子节点</td></tr><tr><td align="left">/bookstore</td><td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">bookstore/book</td><td align="left">选取属于 bookstore 的子元素的所有 book 元素</td></tr><tr><td align="left">//book</td><td align="left">选取所有 book 子元素，而不管它们在文档中的位置</td></tr><tr><td align="left">bookstore//book</td><td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置</td></tr><tr><td align="left">//@lang</td><td align="left">选取名为 lang 的所有属性</td></tr></tbody></table><h3 id="谓语（Predicates）"><a href="#谓语（Predicates）" class="headerlink" title="谓语（Predicates）"></a>谓语（Predicates）</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p><p>谓语被嵌在方括号中。</p><p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">/bookstore/book[1]</td><td align="left">选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td align="left">/bookstore/book[last()]</td><td align="left">选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td align="left">/bookstore/book[last()-1]</td><td align="left">选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td align="left">/bookstore/book[position()&lt;3]</td><td align="left">选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td align="left">//title[@lang]</td><td align="left">选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td align="left">//title[@lang=’eng’]</td><td align="left">选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]</td><td align="left">选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]//title</td><td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h3 id="选取未知节点"><a href="#选取未知节点" class="headerlink" title="选取未知节点"></a>选取未知节点</h3><p>XPath 通配符可用来选取未知的 XML 元素。</p><table><thead><tr><th align="left">通配符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配任何元素节点。</td></tr><tr><td align="left">@*</td><td align="left">匹配任何属性节点。</td></tr><tr><td align="left">node()</td><td align="left">匹配任何类型的节点。</td></tr></tbody></table><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">/bookstore/*</td><td align="left">选取 bookstore 元素的所有子元素。</td></tr><tr><td align="left">//*</td><td align="left">选取文档中的所有元素。</td></tr><tr><td align="left">//title[@*]</td><td align="left">选取所有带有属性的 title 元素。</td></tr></tbody></table><h3 id="选取若干路径"><a href="#选取若干路径" class="headerlink" title="选取若干路径"></a>选取若干路径</h3><p>通过在路径表达式中使用”|”运算符，您可以选取若干个路径。</p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">//book/title | //book/price</td><td align="left">选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td align="left">//title | //price</td><td align="left">选取文档中的所有 title 和 price 元素。</td></tr><tr><td align="left">/bookstore/book/title | //price</td><td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/xpath/xpath-tutorial.html">https://www.runoob.com/xpath/xpath-tutorial.html</a></p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium系列4-元素定位</title>
    <link href="/2021/09/14/Selenium%E7%B3%BB%E5%88%974-%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/"/>
    <url>/2021/09/14/Selenium%E7%B3%BB%E5%88%974-%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说起元素定位，一定是学习自动化测试绕不开的第一道关，无论是web端的UI自动化还是移动端的自动化，在需要首先对元素进行定位才可以完成对元素的操作已达成测试目的，在Selenium中，可以使用<code>find_element</code>（定位单个元素）或<code>find_elements</code>（定位多个元素）方法来定位元素。</p><h2 id="Selenium元素定位常用API"><a href="#Selenium元素定位常用API" class="headerlink" title="Selenium元素定位常用API"></a>Selenium元素定位常用API</h2><p>在工作中我们常用的元素定位API一共有8种，我们先来了解以下6种，xpath和css_selector我们在后面的文章中单独学习</p><h3 id="通过id定位"><a href="#通过id定位" class="headerlink" title="通过id定位"></a>通过id定位</h3><p><strong>说明</strong></p><p>当所定位的元素具有<code>id</code>属性时，我们可以使用by_id来定位该元素，id一般情况下在当前页面中是唯一的。</p><p><strong>语法</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">drivr<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token builtin">id</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>示例</strong></p><p>打开百度首页，定位搜索框，查看页面元素，可以看到搜索框元素的id为 <code>kw</code></p><p><img src="https://img.rockche.cn//image-20210915151758333.png" alt="image-20210915151758333"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token comment"># 打印元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token comment"># 查看元素对应的源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210915154738133.png" alt="image-20210915154738133"></p><p>可以看到el是一个WebElement类型的对象</p><p><strong>定位多个元素</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>els <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token comment"># 查看返回结果的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据类型"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元素个数"</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 遍历结果，查看元素源码</span><span class="token keyword">for</span> i <span class="token keyword">in</span> els<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210915161212582.png" alt="image-20210915161212582"></p><p>可以看到返回数据的类型为list，元素个数为1个</p><h3 id="通过name定位"><a href="#通过name定位" class="headerlink" title="通过name定位"></a>通过name定位</h3><p><strong>说明</strong></p><p>当所定位的元素具有<code>id</code>属性时，我们可以使用by_name来定位该元素，name一般情况下在当前页面中不是唯一的。</p><p><strong>语法</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">drivr<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span>name）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>示例</strong></p><p>打开百度首页，定位搜索框，查看页面元素，可以看到搜索框元素的name为 <code>wd</code></p><p><img src="https://img.rockche.cn//image-20210915162228193.png" alt="image-20210915162228193"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">'wd'</span><span class="token punctuation">)</span><span class="token comment"># 打印元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token comment"># 查看元素对应的源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210915154738133.png" alt="image-20210915154738133"></p><p>可以看到el是一个WebElement类型的对象</p><p><strong>定位多个元素</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>els <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements_by_name<span class="token punctuation">(</span><span class="token string">'wd'</span><span class="token punctuation">)</span><span class="token comment"># 查看返回结果的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据类型"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元素个数"</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 遍历结果，查看元素源码</span><span class="token keyword">for</span> i <span class="token keyword">in</span> els<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210915161212582.png" alt="image-20210915161212582"></p><p>可以看到返回数据的类型为list，元素个数为1个</p><h3 id="通过class-name定位"><a href="#通过class-name定位" class="headerlink" title="通过class_name定位"></a>通过class_name定位</h3><p><strong>说明</strong></p><p>当所定位的元素具有<code>class</code>属性时，我们可以使用by_class_name来定位该元素，class属性一般为多个值。</p><p><strong>语法</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">drivr<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token keyword">class</span>属性值）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>示例</strong></p><p>打开百度首页，定位搜索框，查看页面元素，可以看到搜索框元素的class_name为 <code>s_ipt</code></p><p><img src="https://img.rockche.cn//image-20210916152122253.png" alt="image-20210916152122253"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'s_ipt'</span><span class="token punctuation">)</span><span class="token comment"># 打印元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token comment"># 查看元素对应的源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210915154738133.png" alt="image-20210915154738133"></p><p>可以看到el是一个WebElement类型的对象</p><p><strong>定位多个元素</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>els <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements_by_class_name<span class="token punctuation">(</span><span class="token string">'s_ipt'</span><span class="token punctuation">)</span><span class="token comment"># 查看返回结果的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据类型"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元素个数"</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 遍历结果，查看元素源码</span><span class="token keyword">for</span> i <span class="token keyword">in</span> els<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210915161212582.png" alt="image-20210915161212582"></p><p>可以看到返回数据的类型为list，元素个数为1个</p><h3 id="通过tag-name定位"><a href="#通过tag-name定位" class="headerlink" title="通过tag_name定位"></a>通过tag_name定位</h3><p><strong>说明</strong></p><p>通过元素的标签名称来定位，如果页面中存在多个相同标签，默认返回第一个标签元素</p><p><strong>语法</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">drivr<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">"标签名"</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>示例</strong></p><p>打开网易企业邮箱登录界面，定位登录按钮，查看页面元素，可以看到登录按钮的tag_name为 <code>button</code></p><p><img src="https://img.rockche.cn//image-20210916154544887.png" alt="image-20210916154544887"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://qiye.163.com/login/"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token comment"># 打印元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token comment"># 查看元素对应的源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210916155003704.png" alt="image-20210916155003704"></p><p>可以看到el是一个WebElement类型的对象</p><p><strong>定位多个元素</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://qiye.163.com/login/"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>els <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements_by_tag_name<span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token comment"># 查看返回结果的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据类型"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元素个数"</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 遍历结果，查看元素源码</span><span class="token keyword">for</span> i <span class="token keyword">in</span> els<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210916155052862.png" alt="image-20210916155052862"></p><p>可以看到返回数据的类型为list，元素个数为2个</p><h3 id="通过link-text定位"><a href="#通过link-text定位" class="headerlink" title="通过link_text定位"></a>通过link_text定位</h3><p><strong>说明</strong></p><p><code>by_link_text</code>通过超文本链接上的文字信息来定位元素，一般专门用于定位页面上的超文本链接。</p><p><strong>语法</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">drivr<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">"全部文本"</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>示例</strong></p><p>打开百度首页，定位点击超链接 新闻</p><p><img src="https://img.rockche.cn//image-20210916162710938.png" alt="image-20210916162710938"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">'新闻'</span><span class="token punctuation">)</span><span class="token comment"># 打印元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token comment"># 查看元素对应的源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210916163157767.png" alt="image-20210916163157767"></p><p>可以看到el是一个WebElement类型的对象</p><p><strong>定位多个元素</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>els <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements_by_link_text<span class="token punctuation">(</span><span class="token string">'新闻'</span><span class="token punctuation">)</span><span class="token comment"># 查看返回结果的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据类型"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元素个数"</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 遍历结果，查看元素源码</span><span class="token keyword">for</span> i <span class="token keyword">in</span> els<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210916163131536.png" alt="image-20210916163131536"></p><p>可以看到返回数据的类型为list，元素个数为1个</p><h3 id="通过partial-link-text定位"><a href="#通过partial-link-text定位" class="headerlink" title="通过partial_link_text定位"></a>通过partial_link_text定位</h3><p><strong>说明</strong></p><p>当不确定超链接上的文本信息或者只想通过一些关键字进行匹配时，可以使用<code>by_partial_link_text</code>这个方法来通过部分链接文字进行匹配</p><blockquote><p>可以使用精准或模糊匹配，如果使用模糊匹配最好使用能代表唯一的关键词</p><p>如果有多个值，默认返回第一个值</p></blockquote><p><strong>语法</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">drivr<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token string">"部分文本"</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><strong>示例</strong></p><p>打开百度首页，定位点击超链接 hao123</p><p><img src="https://img.rockche.cn//image-20210916163652350.png" alt="image-20210916163652350"></p><p><strong>代码</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token string">'hao'</span><span class="token punctuation">)</span><span class="token comment"># 打印元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token comment"># 查看元素对应的源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210916164000370.png" alt="image-20210916164000370"></p><p>可以看到el是一个WebElement类型的对象</p><p><strong>定位多个元素</strong></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 实例化浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问被测网址</span>url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 元素定位</span>els <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token string">'hao'</span><span class="token punctuation">)</span><span class="token comment"># 查看返回结果的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据类型"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元素个数"</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>els<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 遍历结果，查看元素源码</span><span class="token keyword">for</span> i <span class="token keyword">in</span> els<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'outerHTML'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果如下：</p><p><img src="https://img.rockche.cn//image-20210916164020208.png" alt="image-20210916164020208"></p><p>可以看到返回数据的类型为list，元素个数为1个</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/liuyuelinfighting/p/14925556.html">https://www.cnblogs.com/liuyuelinfighting/p/14925556.html</a></p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium系列3-浏览器对象操作</title>
    <link href="/2021/09/13/Selenium%E7%B3%BB%E5%88%973-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/09/13/Selenium%E7%B3%BB%E5%88%973-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们日常进行UI自动化工作时，对浏览器对象的操作是所有用例的基础，而selenium的API，可以分为三大类：</p><ul><li>对浏览器本身的相关操作</li><li>对浏览器页面中元素的定位</li><li>对定位后元素的操作（如点击、输入等）</li></ul><p>所以在深入了解selenium前，我们先来看看selenium中是如何操作浏览器本身的</p><h2 id="导入selenium库"><a href="#导入selenium库" class="headerlink" title="导入selenium库"></a>导入selenium库</h2><p>要使用selenium，必须先导入Selenium库</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium库</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="创建浏览器对象"><a href="#创建浏览器对象" class="headerlink" title="创建浏览器对象"></a>创建浏览器对象</h2><p>创建一个浏览器对象</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 语法：driver = webdriver.xxx()     xxx为对应浏览器</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="浏览器窗口大小设置"><a href="#浏览器窗口大小设置" class="headerlink" title="浏览器窗口大小设置"></a>浏览器窗口大小设置</h2><p>我们在测试过程中，经常会有改变浏览器大小的场景，可以使用<code>set_window_size()</code>方法改变浏览器的大小</p><p>如果需要获取浏览器当前的大小数值，可以使用<code>get_window_size()</code>    </p><p>也可以使用<code>maximize_window()</code>将浏览器最大化</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 设置浏览器尺寸</span><span class="token comment"># 宽600、高1000</span>driver<span class="token punctuation">.</span>set_window_size<span class="token punctuation">(</span><span class="token number">600</span>，<span class="token number">1000</span>）<span class="token comment"># 获取浏览器尺寸</span>driver<span class="token punctuation">.</span>get_window_size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 浏览器窗口最大化（常用）</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="浏览器位置设置"><a href="#浏览器位置设置" class="headerlink" title="浏览器位置设置"></a>浏览器位置设置</h2><p>那么如果需要移动浏览器的位置改如何实现呢，selenium提供了<code>set_window_position()</code>方法改变浏览器的位置</p><p>如果需要获取浏览器当前的位置，可以使用<code>get_window_position()</code>    </p><blockquote><p>显示器以左上角为<code>(0,0)</code>，所有的位置操作都是相对于显示器左上角展开的位移操作</p></blockquote><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取浏览器的当前位置</span>driver<span class="token punctuation">.</span>get_window_position<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 设置浏览器的位置</span>driver<span class="token punctuation">.</span>set_window_position<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="访问被测网址"><a href="#访问被测网址" class="headerlink" title="访问被测网址"></a>访问被测网址</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 请求被测网址</span><span class="token comment"># 语法：driver.get(url)</span>url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="浏览器页面前进、后退和刷新"><a href="#浏览器页面前进、后退和刷新" class="headerlink" title="浏览器页面前进、后退和刷新"></a>浏览器页面前进、后退和刷新</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 页面前进</span>driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 页面后退</span>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 页面刷新</span>driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="关闭浏览器"><a href="#关闭浏览器" class="headerlink" title="关闭浏览器"></a>关闭浏览器</h2><p>在测试用例执行结束之后，我们需要关闭浏览器，selenium提供了两种关闭浏览器的方法</p><ul><li>关闭当前窗口</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 关闭当前浏览器窗口</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><ul><li>关闭窗口并关闭浏览器驱动</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 即关闭浏览器窗口，同时关闭浏览器驱动</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>通过以下的例子来看看这些方法的实际使用</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入selenium库</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token comment"># 创建浏览器对象</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 设置浏览器窗口大小</span>driver<span class="token punctuation">.</span>set_window_size<span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token comment"># 获取当前浏览器窗口大小</span>s <span class="token operator">=</span> driver<span class="token punctuation">.</span>get_window_size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># 最大化浏览器窗口</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 获取当前浏览器位置</span>p1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>get_window_position<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token comment"># 移动浏览器位置</span>driver<span class="token punctuation">.</span>set_window_position<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> driver<span class="token punctuation">.</span>get_window_position<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 访问被测地址</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.jd.com"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.taobao.com"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 使用前进，后退，刷新命令</span><span class="token comment"># 前进</span>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 后退到京东</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 后退到百度</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 后退</span>driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 前进到京东</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 前进到淘宝</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 刷新</span>driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 保持在淘宝页面</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/liuyuelinfighting/p/14923204.html">https://www.cnblogs.com/liuyuelinfighting/p/14923204.html</a></p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium系列2-搭建测试环境</title>
    <link href="/2021/09/09/Selenium%E7%B3%BB%E5%88%972-%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/09/09/Selenium%E7%B3%BB%E5%88%972-%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="浏览器驱动下载"><a href="#浏览器驱动下载" class="headerlink" title="浏览器驱动下载"></a>浏览器驱动下载</h2><h3 id="ChromeDriver-for-Chrome"><a href="#ChromeDriver-for-Chrome" class="headerlink" title="ChromeDriver for Chrome"></a>ChromeDriver for Chrome</h3><p>首先查看Chrome版本号</p><p><img src="https://img.rockche.cn//image-20210911160205395.png" alt="image-20210911160205395"></p><p>下载对应版本的驱动</p><ul><li>官方下载地址：<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></li><li>国内镜像地址：<a href="https://npm.taobao.org/mirrors/chromedriver">https://npm.taobao.org/mirrors/chromedriver</a></li><li>版本对应查看地址：<a href="http://chromedriver.storage.googleapis.com/2.43/notes.txt">http://chromedriver.storage.googleapis.com/2.43/notes.txt</a></li></ul><p>选择指定的ChromeDriver版本，可根据不同的平台（Win、Mac、Linux）下载指定的ChromeDriver</p><p><img src="https://img.rockche.cn//image-20210911160338218.png" alt="image-20210911160338218"></p><h3 id="Geckodriver-for-Firefox"><a href="#Geckodriver-for-Firefox" class="headerlink" title="Geckodriver for Firefox"></a>Geckodriver for Firefox</h3><p>使用Firefox进行自动化测试时，Selenium1.0或Selenium2.0是可以直接驱动Firefox的，如果使用Selenium3.0，则需要下载Geckodriver驱动</p><ul><li>驱动下载地址：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></li><li>国内镜像地址：<a href="https://npm.taobao.org/mirrors/geckodriver/">https://npm.taobao.org/mirrors/geckodriver/</a></li></ul><p>根据不同的平台（Win、Mac、Linux等）下载指定的geckodriver驱动</p><span id="more"></span><p><img src="https://img.rockche.cn//image-20210911161011883.png" alt="image-20210911161011883"></p><blockquote><ul><li><code>Firefox 47</code> 及以前版本，不需要<code>geckodriver</code>驱动。</li><li><code>geckodriver v0.19.0</code>：<code>Firefox 55</code>（及更高版本），<code>Selenium3.5</code>（及更高）</li><li><code>geckodriver v0.21.0</code>：<code>Firefox 57</code>（及更高版本），<code>Selenium3.11</code>（及更高）</li></ul></blockquote><h3 id="IEDriverServer-for-IE"><a href="#IEDriverServer-for-IE" class="headerlink" title="IEDriverServer for IE"></a>IEDriverServer for IE</h3><p>IEDriverServer下载地址：<a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a></p><p>根据Win平台是32位还是64位，下载指定的IEDriverServer驱动</p><p><img src="https://img.rockche.cn//image-20210911161338542.png" alt="image-20210911161338542"></p><h3 id="Webdriver-for-Edge"><a href="#Webdriver-for-Edge" class="headerlink" title="Webdriver for Edge"></a>Webdriver for Edge</h3><ul><li>驱动下载地址：<a href="https://developer.microsoft.com/zh-cn/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/zh-cn/microsoft-edge/tools/webdriver/</a></li></ul><p>选择指定的WebDriver版本，可根据不同的平台（Win、Mac、Linux）下载指定的WebDriver</p><p><img src="https://img.rockche.cn//image-20210911162124182.png" alt="image-20210911162124182"></p><h3 id="OperaDriver-for-Opera"><a href="#OperaDriver-for-Opera" class="headerlink" title="OperaDriver for Opera"></a>OperaDriver for Opera</h3><ul><li>驱动下载地址：<a href="https://github.com/operasoftware/operachromiumdriver/releases">https://github.com/operasoftware/operachromiumdriver/releases</a></li><li>国内镜像地址：<a href="https://npm.taobao.org/mirrors/operadriver/">https://npm.taobao.org/mirrors/operadriver/</a></li></ul><p><img src="https://img.rockche.cn//image-20210911162340870.png" alt="image-20210911162340870"></p><h2 id="浏览器驱动与Python整合"><a href="#浏览器驱动与Python整合" class="headerlink" title="浏览器驱动与Python整合"></a>浏览器驱动与Python整合</h2><ul><li><p>Windows环境</p><p>将下载好的浏览器驱动解压后，如：<code>chromedriver.exe</code>放置在Python安装路径的根目录下即可</p></li><li><p>Mac环境</p><p>mac下需要将驱动解压后放在<code>/usr/local/bin/</code>目录中</p></li></ul><h2 id="安装Selenium"><a href="#安装Selenium" class="headerlink" title="安装Selenium"></a>安装Selenium</h2><p>通过pip命令可以直接安装</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> selenium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="第一个测试脚本"><a href="#第一个测试脚本" class="headerlink" title="第一个测试脚本"></a>第一个测试脚本</h2><p>完成了以上的准备工作，我们的Selenium+Python自动化测试环境就搭建好了，下面就可以编写自动化脚本了</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.导入selenium包</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 2.选择并打开浏览器（谷歌）</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 3. 输入百度网址</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 4.对网址的操作</span><span class="token comment"># 5.关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="Chrome模拟移动端"><a href="#Chrome模拟移动端" class="headerlink" title="Chrome模拟移动端"></a>Chrome模拟移动端</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.导入selenium包</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 2.添加谷歌浏览器加载项</span>mobileEmulation <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"deviceName"</span><span class="token punctuation">:</span> <span class="token string">"iPhone X"</span><span class="token punctuation">&#125;</span>options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 因为传入的是字典类型的数据，所以使用的add方法也不一样</span>options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">"mobileEmulation"</span><span class="token punctuation">,</span> mobileEmulation<span class="token punctuation">)</span><span class="token comment"># 3.打开谷歌浏览器——将模拟移动端的参数，传入打开的浏览器中</span><span class="token comment"># options和chrome_options一样，chrome_options将弃用。</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">)</span><span class="token comment"># 4.打开地址</span>url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 5.关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/liuyuelinfighting/p/14921476.html">https://www.cnblogs.com/liuyuelinfighting/p/14921476.html</a></p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium系列1-Selenium介绍</title>
    <link href="/2021/09/07/Selenium%E7%B3%BB%E5%88%971-Selenium%E4%BB%8B%E7%BB%8D%20/"/>
    <url>/2021/09/07/Selenium%E7%B3%BB%E5%88%971-Selenium%E4%BB%8B%E7%BB%8D%20/</url>
    
    <content type="html"><![CDATA[<h2 id="主流的自动化测试工具"><a href="#主流的自动化测试工具" class="headerlink" title="主流的自动化测试工具"></a>主流的自动化测试工具</h2><ul><li>QTP<ul><li>QTP是一个商业的自动化测试工具，收费，支持web、桌面自动化测试</li></ul></li><li>Selenium<ul><li>Selenium是一个开源的web自动化测试工具，免费</li></ul></li><li>Robot framework<ul><li>Robot framework是一个基于Python可扩展的关键字驱动的测试自动化框架（基本上已被淘汰）</li></ul></li><li>Airtest<ul><li>Airtest是网易公司的基于图像识别的UI自动化测试工具，多用于测试手机游戏，也可以用于APP、小程序测试</li></ul></li></ul><h2 id="Selenium介绍"><a href="#Selenium介绍" class="headerlink" title="Selenium介绍"></a>Selenium介绍</h2><p>Selenium是最广泛使用的开源Web UI（用户界面）自动化测试套件之一。它最初由杰森·哈金斯（Jason Huggins）于2004年开发，作为Thought Works的内部工具。Selenium支持跨不同浏览器，平台和编程语言的自动化。</p><p>Selenium可以轻松部署在Windows，Linux，Solaris和Macintosh等平台上。此外，它支持IOS（IOS，Windows Mobile和Android）等移动应用程序的OS（操作系统）。</p><p>Selenium通过使用特定于每种语言的驱动程序支持各种编程语言。Selenium支持的语言包括C#，Java，Perl，PHP，Python和Ruby。目前，Selenium Web驱动程序最受Python和C＃欢迎。 Selenium测试脚本可以使用任何支持的编程语言进行编码，并且可以直接在大多数现代Web浏览器中运行。 Selenium支持的浏览器包括Internet Explorer，Mozilla Firefox，Google Chrome和Safari。</p><h2 id="Selenium特点"><a href="#Selenium特点" class="headerlink" title="Selenium特点"></a>Selenium特点</h2><ul><li>开源</li><li>跨平台：Linux、windows、Mac</li><li>支持多种浏览器：Firefox、Chrome、IE、Edge、Opera、Safari等</li><li>支持多种语言：java、python、C#、Javascript、Ruby、Php等</li><li>成熟稳定</li><li>功能强大<span id="more"></span></li></ul><h2 id="Selenium的发展"><a href="#Selenium的发展" class="headerlink" title="Selenium的发展"></a>Selenium的发展</h2><p>从2004年至今，Selenium经历了3个版本，即<code>Selenium1.0</code>，<code>Selenium2.0</code>，<code>Selenium3.0</code>。</p><ul><li>Selenium1.0<ul><li>seleniumIDE      <ul><li>是Firefox浏览器中的一个插件，实现简单的浏览器操作的录制与回放功能。生成测试用例，可将测试用例转换为其他语言的自动化脚本。如果没有编程经验，可以通过Selenium IDE来快速熟悉Selenium的命令。（只适用于火狐浏览器）</li></ul></li><li>seleniumGrid <ul><li>分布式测试。用于运行在不同的机器，不同的浏览器并行测试的工具，目的在于加快测试用例运行的速度，从而减少测试运行的总时间。利用Grid可以很方便地实现在多台机器上和异构环境中运行测试用例。</li></ul></li><li>seleniumRC<ul><li>Selenium RC是Selenium1.0核心部分，Selenium RC的功能就是通过代码操作浏览器。</li></ul></li></ul></li><li>Selenium2.0    <ul><li>Selenium1.0+WebDriver<ul><li>WebDriver比Selenium RC功能强大且简单。WebDriver是通过原生浏览器支持或者浏览器扩展来直接控制浏览器。WebDriver针对各个浏览器而开发，使用不同浏览器都需要对应浏览器驱动，与浏览器紧密集成，因此支持创建更高级的测试，避免了JavaScript安全模型导致的限制。除了来自浏览器厂商的支持之外，WebDriver还利用操作系统级的调用，模拟用户输入。我们在使用WebDriver时，可以看到，是先启动了浏览器对应driver，通过浏览器driver启动浏览器。</li></ul></li></ul></li><li>Selenium3.0<ul><li>弃掉了seleniumRC</li><li>全面拥抱java8</li><li>支持MacOS</li><li>通过Mozilla官方的geckodriver来支持firefox</li><li>Selenium 3.0在Selenium 2.0的基础上增加了对Win10系统的Edge浏览器和Mac系统Safari浏览器的支持，并且在启动Firefox浏览器时也必须使用浏览器驱动geckodriver。去掉了Selenium RC，因此Selenium 3.0的学习核心也是WebDriver。</li></ul></li></ul><h2 id="WebDriver与Selenium-RC的区别"><a href="#WebDriver与Selenium-RC的区别" class="headerlink" title="WebDriver与Selenium RC的区别"></a>WebDriver与Selenium RC的区别</h2><p><strong>Selenium RC</strong></p><p>Selenium RC使用的是javascript注入的方式跟浏览器打交道。这样Selenium RC需要启动一个Server，然后将操作页面元素的API 转成javascript脚本，再把这段脚本注入到浏览器中去执行。而通过这种javascript注入的方式一来太依赖翻译成javascript质量的好坏，二来javascript存在同源问题。这使测试变得不那么容易。</p><p>总结：</p><ul><li>Selenium RC需要Selenium Server才能运行测试用例。</li><li>Selenium RC使用JavaScript来驱动浏览器运行测试用例。</li><li>Selenium RC只能支持Web应用的测试。</li><li>Selenium RC能支持所有浏览器但并不能及时支持最新版本。</li></ul><p><strong>WebDriver</strong></p><p>与Selenium RC不同的是Selenium WebDriver针对不同的浏览器进行独立开发Driver，利用浏览器的原生API去直接操作浏览器和页面元素，这样大大提高了测试的稳定性和速度。当然因为不同的浏览器对Web元素操作和呈现多多少少会存在一些差异，这也就造成现在不同的浏览器需要有对应不同的Driver。</p><p>总结：</p><ul><li>WebDriver不需要Selenium Server就可以运行测试用例。</li><li>WebDriver独立使用原生浏览器来运行测试用例。</li><li>WebDriver既可以测试传统桌面Web应用，也可以测试手机上的应用程序，如iPhone或Android上的app程序。</li><li>WebDriver能支持大多数浏览器的最新版本。</li></ul><p><strong>总结</strong></p><table><thead><tr><th align="left">Selenium RC</th><th>Selenium WebDirver</th></tr></thead><tbody><tr><td align="left">Selenium RC的架构复杂，运行测试脚本前必须先启动Selenium RC Server</td><td>WebDirver架构简单，通过OS层级来控制浏览器</td></tr><tr><td align="left">Selenium RC通过Selenium RC Server中转才能与浏览器进行交互</td><td>WebDriver直接与浏览器进行交互</td></tr><tr><td align="left">Selenium RC则通过Selenium Core（javascript实现）来间接驱动浏览器</td><td>Webdriver直接调用浏览器原生API进行驱动，速度较快</td></tr><tr><td align="left">Selenium RC的API复杂冗余，不利于学习掌握</td><td>Webdriver的API简洁，只要掌握几个常用的即可进行测试</td></tr><tr><td align="left">Selenium RC只能驱动可视化的浏览器</td><td>Webdriver除了驱动可视化的浏览器，还可以驱动内存模式的浏览器，比如HtmlUnit browser，phantomjs</td></tr><tr><td align="left">不能测试移动应用程序</td><td>可以测试iPhone/Android应用程序</td></tr></tbody></table><h2 id="WebDirver工作原理"><a href="#WebDirver工作原理" class="headerlink" title="WebDirver工作原理"></a>WebDirver工作原理</h2><p><img src="https://img.rockche.cn//image-20210911153057800.png" alt="image-20210911153057800"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/liuyuelinfighting/p/14901498.html">https://www.cnblogs.com/liuyuelinfighting/p/14901498.html</a></p>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Homebrew相关</title>
    <link href="/2021/08/19/Homebrew%E7%9B%B8%E5%85%B3/"/>
    <url>/2021/08/19/Homebrew%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>Mac的软件包管理工具，类似于linux的<code>apt-get</code>，能在mac中方便地安装软件或者卸载软件。</li></ul><h1 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>Homebrew依赖xcode和其Command Line Tools。</p><ol><li>在App Store中安装最新版本的xcode；</li><li>执行<code>xcode-select --install</code>安装Command Line Tools。</li></ol></li><li><p>把Homebrew安装到<code>/usr/local</code>。</p><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li></ul><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;uninstall)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h2><ol><li><p>备份<code>/usr/local/Cellar</code>。</p></li><li><p>删除Homebrew相关文件。</p><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">cd &#x2F;usr&#x2F;localsudo rm -rf Library .git .gitignore bin&#x2F;brew README.md share&#x2F;man&#x2F;man1&#x2F;brewsudo rm -rf Homebrewsudo rm -rf ~&#x2F;Library&#x2F;Caches&#x2F;Homebrew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>卸载Homebrew。</p><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;uninstall)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>安装Homebrew。</p><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></li><li><p>将第1步中的备份拷贝回<code>/usr/local/Cellar</code>。</p></li><li><p>更新Homebrew及其管理的各软件。</p><div class="code-wrapper"><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">brew updatebrew upgradebrew cleanup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></li><li><p><code>brew doctor</code>检测Homebrew潜在问题，并自行排错。如使用<code>brew link 软件名</code>将备份的软件重新symlink到Homebrew上。</p></li></ol><h1 id="使用Homebrew"><a href="#使用Homebrew" class="headerlink" title="使用Homebrew"></a>使用Homebrew</h1><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p><code>brew install 软件名</code>，如<code>brew install git</code>。</p><h2 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h2><p><code>brew uninstall 软件名</code>，如<code>brew uninstall git</code>。</p><h2 id="查找软件"><a href="#查找软件" class="headerlink" title="查找软件"></a>查找软件</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">brew search 查询内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ol><li>普通查询，<code>brew search git</code></li><li>正则查询，<code>brew search /gi*/</code></li></ol><h2 id="查看哪些安装包需要更新"><a href="#查看哪些安装包需要更新" class="headerlink" title="查看哪些安装包需要更新"></a>查看哪些安装包需要更新</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">brew outdated<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="升级软件"><a href="#升级软件" class="headerlink" title="升级软件"></a>升级软件</h2><ul><li><code>brew upgrade 软件名</code>：更新指定软件，如<code>brew update git</code>。</li><li><code>brew upgrade</code>：更新所有软件。</li></ul><h2 id="清理软件"><a href="#清理软件" class="headerlink" title="清理软件"></a>清理软件</h2><ul><li><code>brew cleanup -n</code>：查看哪些软件包要被清除。</li><li><code>brew cleanup 软件名</code>：清除指定软件包的所有老版本。</li><li><code>brew cleanup</code>：清除所有软件包的所有老版本。</li></ul><h2 id="关联软件"><a href="#关联软件" class="headerlink" title="关联软件"></a>关联软件</h2><ul><li><p><code>brew prune</code>：清理无用的symlink，且清理与之相关的位于<code>/Applications</code>和<code>~/Applications</code>中的无用App链接。</p></li><li><p><code>brew link 软件名</code>：将指定软件的安装文件symlink到Homebrew上。</p><blockquote><p><code>brew install</code>安装的软件会自动执行link操作；<br> DIY安装的需要手动执行link操作；<br> 加上<code>--overwrite</code>选项，会先删除旧的symlink，再进行新的link操作。</p></blockquote></li></ul><h2 id="信息查询"><a href="#信息查询" class="headerlink" title="信息查询"></a>信息查询</h2><ul><li><code>brew -v</code>：查看Homebrew版本号。</li><li><code>brew list</code>：列出已安装的软件。</li><li><code>brew home</code>：用浏览器打开homebrew官网。</li><li><code>brew info</code>：显示软件信息。</li></ul><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul><li><code>brew update</code>：升级Homebrew自身。</li><li><code>brew doctor</code>：检测系统中与Homebrew有关的潜在问题。</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest13-多重校验插件pytest-assume</title>
    <link href="/2021/07/23/Pytest13-%E5%A4%9A%E9%87%8D%E6%A0%A1%E9%AA%8C%E6%8F%92%E4%BB%B6pytest-assume/"/>
    <url>/2021/07/23/Pytest13-%E5%A4%9A%E9%87%8D%E6%A0%A1%E9%AA%8C%E6%8F%92%E4%BB%B6pytest-assume/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在pytest中，我们可以使用python的assert进行断言，也可以同时在一个用例中进行多个断言，但存在一个问题就是当一个断言失败后，后面的断言将不再执行。那么如何解决这个问题呢，我们可以使用pytest-assume这个插件</p><h2 id="pytest-assume插件"><a href="#pytest-assume插件" class="headerlink" title="pytest-assume插件"></a>pytest-assume插件</h2><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>pip命令安装</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> pytest-assume<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="使用assert进行多重断言"><a href="#使用assert进行多重断言" class="headerlink" title="使用assert进行多重断言"></a>使用assert进行多重断言</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span>    <span class="token keyword">assert</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">5</span>    <span class="token keyword">assert</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">5</span>    <span class="token keyword">assert</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">6</span>    <span class="token keyword">assert</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下：</p><p><img src="https://img.rockche.cn//image-20210723165423002.png" alt="image-20210723165423002"></p><p>可以看到，在第4行代码的断言失败后，后面的断言都没有被执行，包括正常的代码</p><h3 id="使用pytest-assume断言"><a href="#使用pytest-assume断言" class="headerlink" title="使用pytest.assume断言"></a>使用pytest.assume断言</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pytest<span class="token punctuation">.</span>assume<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    pytest<span class="token punctuation">.</span>assume<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>    pytest<span class="token punctuation">.</span>assume<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>    pytest<span class="token punctuation">.</span>assume<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span>    pytest<span class="token punctuation">.</span>assume<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下</p><p><img src="https://img.rockche.cn//image-20210723170209979.png" alt="image-20210723170209979"></p><p>可以看到，在有断言失败后，后面的断言还是会继续执行，python-assume有助于我们进行多重校验，比assert更加高效</p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python练习1</title>
    <link href="/2021/07/23/Python%E7%BB%83%E4%B9%A01/"/>
    <url>/2021/07/23/Python%E7%BB%83%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>可填在百位、十位、个位的数字都是 1、2、3、4。组成所有的排列后再去掉不满足条件的排列</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>                n <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"共计 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string"> 个"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python练习题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux2-测试常用命令</title>
    <link href="/2021/07/19/Linux2-%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/07/19/Linux2-%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道 Linux 下有非常多的命令，我们可以通过这些命令在 Shell 环境下与机器进行交互，那么 Linux 下有多少资源可以供我们调度呢？其实是非常多的，但所有资源都可以分为三大类型。</p><blockquote><p>文件：Everything is file；</p><p>进程：文件的运行形态</p><p>网络：特殊的文件</p></blockquote><p>下面我们就来看看有哪些测试常用的命令吧</p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><h3 id="进入上级目录"><a href="#进入上级目录" class="headerlink" title="进入上级目录"></a>进入上级目录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="进入当前用户主目录"><a href="#进入当前用户主目录" class="headerlink" title="进入当前用户主目录"></a>进入当前用户主目录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ～<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="进入根目录"><a href="#进入根目录" class="headerlink" title="进入根目录"></a>进入根目录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="进入上两级目录"><a href="#进入上两级目录" class="headerlink" title="进入上两级目录"></a>进入上两级目录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="进入当前目录"><a href="#进入当前目录" class="headerlink" title="进入当前目录"></a>进入当前目录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="进入指定目录，如-usr-local"><a href="#进入指定目录，如-usr-local" class="headerlink" title="进入指定目录，如/usr/local"></a>进入指定目录，如/usr/local</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><h3 id="新建一个文件夹"><a href="#新建一个文件夹" class="headerlink" title="新建一个文件夹"></a>新建一个文件夹</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="新建多个文件夹"><a href="#新建多个文件夹" class="headerlink" title="新建多个文件夹"></a>新建多个文件夹</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> test1 test2 test3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="新建一个多层级文件夹"><a href="#新建一个多层级文件夹" class="headerlink" title="新建一个多层级文件夹"></a>新建一个多层级文件夹</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p test/rock/good<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="新建一个文件夹并设置权限"><a href="#新建一个文件夹并设置权限" class="headerlink" title="新建一个文件夹并设置权限"></a>新建一个文件夹并设置权限</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -m <span class="token number">777</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><h3 id="移动文件test-py到-usr-local"><a href="#移动文件test-py到-usr-local" class="headerlink" title="移动文件test,py到/usr/local"></a>移动文件test,py到/usr/local</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> test.py  /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="移动文件test-py到-usr-local并重命名为test1-py"><a href="#移动文件test-py到-usr-local并重命名为test1-py" class="headerlink" title="移动文件test,py到/usr/local并重命名为test1.py"></a>移动文件test,py到/usr/local并重命名为test1.py</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> test.py  /usr/local/test1.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="移动文件到上级目录"><a href="#移动文件到上级目录" class="headerlink" title="移动文件到上级目录"></a>移动文件到上级目录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> test.py <span class="token punctuation">..</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="移动文件test-py和test2-py到-usr-local"><a href="#移动文件test-py和test2-py到-usr-local" class="headerlink" title="移动文件test.py和test2.py到/usr/local"></a>移动文件test.py和test2.py到/usr/local</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> test.py test2.py -t  /usr/localbash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="移动文件test-py到-usr-local下，但-usr-local已存在test-py，强制覆盖"><a href="#移动文件test-py到-usr-local下，但-usr-local已存在test-py，强制覆盖" class="headerlink" title="移动文件test.py到/usr/local下，但/usr/local已存在test.py，强制覆盖"></a>移动文件test.py到/usr/local下，但/usr/local已存在test.py，强制覆盖</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> test.py  -f  /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="移动文件test-py到-usr-local下，但-usr-local已存在test-py，询问是否覆盖"><a href="#移动文件test-py到-usr-local下，但-usr-local已存在test-py，询问是否覆盖" class="headerlink" title="移动文件test.py到/usr/local下，但/usr/local已存在test.py，询问是否覆盖"></a>移动文件test.py到/usr/local下，但/usr/local已存在test.py，询问是否覆盖</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> test.py  -i  /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><h3 id="复制文件test-txt到-usr-local目录"><a href="#复制文件test-txt到-usr-local目录" class="headerlink" title="复制文件test.txt到/usr/local目录"></a>复制文件test.txt到/usr/local目录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> test.txt /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="复制文件夹-Test到-usr-local目录"><a href="#复制文件夹-Test到-usr-local目录" class="headerlink" title="复制文件夹 Test到/usr/local目录"></a>复制文件夹 Test到/usr/local目录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -r Test/ /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="再次复制文件test-txt到-usr-local目录，强制覆盖"><a href="#再次复制文件test-txt到-usr-local目录，强制覆盖" class="headerlink" title="再次复制文件test.txt到/usr/local目录，强制覆盖"></a>再次复制文件test.txt到/usr/local目录，强制覆盖</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -f test.txt /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="再次复制文件test-txt到-usr-local目录，询问是否强制覆盖"><a href="#再次复制文件test-txt到-usr-local目录，询问是否强制覆盖" class="headerlink" title="再次复制文件test.txt到/usr/local目录，询问是否强制覆盖"></a>再次复制文件test.txt到/usr/local目录，询问是否强制覆盖</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -i test.txt /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="复制文件tests-txt到-usr-local目录，并把修改时间和访问权限也复制"><a href="#复制文件tests-txt到-usr-local目录，并把修改时间和访问权限也复制" class="headerlink" title="复制文件tests.txt到/usr/local目录，并把修改时间和访问权限也复制"></a>复制文件tests.txt到/usr/local目录，并把修改时间和访问权限也复制</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -p test.txt /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="history命令"><a href="#history命令" class="headerlink" title="history命令"></a>history命令</h2><h3 id="查看历史命令执行记录"><a href="#查看历史命令执行记录" class="headerlink" title="查看历史命令执行记录"></a>查看历史命令执行记录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="查看命令mkdir-的历史执行记录"><a href="#查看命令mkdir-的历史执行记录" class="headerlink" title="查看命令mkdir 的历史执行记录"></a>查看命令mkdir 的历史执行记录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">mkdir</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img.rockche.cn//image-20210720163725599.png" alt="image-20210720163725599"></p><h3 id="执行历史记录中，序号为1280的命令"><a href="#执行历史记录中，序号为1280的命令" class="headerlink" title="执行历史记录中，序号为1280的命令"></a>执行历史记录中，序号为1280的命令</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span><span class="token number">1280</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="执行上一条命令"><a href="#执行上一条命令" class="headerlink" title="执行上一条命令"></a>执行上一条命令</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">！！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="查找最后10条历史记录"><a href="#查找最后10条历史记录" class="headerlink" title="查找最后10条历史记录"></a>查找最后10条历史记录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>或</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">tail</span> -10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img.rockche.cn//image-20210720164100633.png" alt="image-20210720164100633"></p><h3 id="清除历史记录"><a href="#清除历史记录" class="headerlink" title="清除历史记录"></a>清除历史记录</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="把历史记录写入文件中"><a href="#把历史记录写入文件中" class="headerlink" title="把历史记录写入文件中"></a>把历史记录写入文件中</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">history</span> -w<span class="token function">cat</span> ~/.bash_history<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h2><h3 id="压缩一个文件-Test-ini"><a href="#压缩一个文件-Test-ini" class="headerlink" title="压缩一个文件 Test.ini"></a>压缩一个文件 Test.ini</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zcvf Test.tar.gz Test.ini <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="压缩多个文件-Test-ini、-readme-ini"><a href="#压缩多个文件-Test-ini、-readme-ini" class="headerlink" title="压缩多个文件 Test.ini、 readme.ini"></a>压缩多个文件 Test.ini、 readme.ini</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zcvf all.tar.gz Test.ini readme.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="压缩文件夹-Test"><a href="#压缩文件夹-Test" class="headerlink" title="压缩文件夹 Test/"></a>压缩文件夹 Test/</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zcvf Test.tar.gz Test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="将当前目录，所有jpg文件打包成Testjpg-tar"><a href="#将当前目录，所有jpg文件打包成Testjpg-tar" class="headerlink" title="将当前目录，所有jpg文件打包成Testjpg.tar"></a>将当前目录，所有jpg文件打包成Testjpg.tar</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -cvf Testjpg.tar.gz *.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="将当前目录，所有jpg文件打包成Testjpg-tar-gz"><a href="#将当前目录，所有jpg文件打包成Testjpg-tar-gz" class="headerlink" title="将当前目录，所有jpg文件打包成Testjpg.tar.gz"></a>将当前目录，所有jpg文件打包成Testjpg.tar.gz</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zcvf Testjpg.tar.gz *.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="解压-Testjpg-tar"><a href="#解压-Testjpg-tar" class="headerlink" title="解压 Testjpg.tar"></a>解压 Testjpg.tar</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -xvf Testjpg.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="解压-Testjpg-tar-gz"><a href="#解压-Testjpg-tar-gz" class="headerlink" title="解压 Testjpg.tar.gz"></a>解压 Testjpg.tar.gz</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf Testjpg.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><h4 id="实时刷新log"><a href="#实时刷新log" class="headerlink" title="实时刷新log"></a>实时刷新log</h4><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tail</span> -f test.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="实时刷新最新50条log"><a href="#实时刷新最新50条log" class="headerlink" title="实时刷新最新50条log"></a>实时刷新最新50条log</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -50f test.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="显示最后5条log"><a href="#显示最后5条log" class="headerlink" title="显示最后5条log"></a>显示最后5条log</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -n <span class="token number">5</span> test.log<span class="token function">tail</span> -5 test.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="显示第5条后面的所有log"><a href="#显示第5条后面的所有log" class="headerlink" title="显示第5条后面的所有log"></a>显示第5条后面的所有log</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> -n +5 test.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><h3 id="列出当前目录中所有的子目录和文件-不包含隐藏文件-开头的"><a href="#列出当前目录中所有的子目录和文件-不包含隐藏文件-开头的" class="headerlink" title="列出当前目录中所有的子目录和文件(不包含隐藏文件 .开头的)"></a>列出当前目录中所有的子目录和文件(不包含隐藏文件 .开头的)</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="列出目录下的所有的子目录和文件（包含隐藏文件-开头的）"><a href="#列出目录下的所有的子目录和文件（包含隐藏文件-开头的）" class="headerlink" title="列出目录下的所有的子目录和文件（包含隐藏文件 .开头的）"></a>列出目录下的所有的子目录和文件（包含隐藏文件 .开头的）</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="列出文件的详细信息（包括权限、所有者、文件大小等）-两种方式"><a href="#列出文件的详细信息（包括权限、所有者、文件大小等）-两种方式" class="headerlink" title="列出文件的详细信息（包括权限、所有者、文件大小等） 两种方式"></a>列出文件的详细信息（包括权限、所有者、文件大小等） 两种方式</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -lll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="列出当前目录中所有以“test”开头的详细内容"><a href="#列出当前目录中所有以“test”开头的详细内容" class="headerlink" title="列出当前目录中所有以“test”开头的详细内容"></a>列出当前目录中所有以“test”开头的详细内容</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -l test*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="按文件最后修改时间降序排列显示"><a href="#按文件最后修改时间降序排列显示" class="headerlink" title="按文件最后修改时间降序排列显示"></a>按文件最后修改时间降序排列显示</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="按文件大小从大到小排序显示"><a href="#按文件大小从大到小排序显示" class="headerlink" title="按文件大小从大到小排序显示"></a>按文件大小从大到小排序显示</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="查看文件时显示文件大小"><a href="#查看文件时显示文件大小" class="headerlink" title="查看文件时显示文件大小"></a>查看文件时显示文件大小</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -l -hll -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><h3 id="查看所有进程"><a href="#查看所有进程" class="headerlink" title="查看所有进程"></a>查看所有进程</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="显示所有进程的详细信息"><a href="#显示所有进程的详细信息" class="headerlink" title="显示所有进程的详细信息"></a>显示所有进程的详细信息</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img.rockche.cn//image-20210721171505481.png" alt="image-20210721171505481"></p><p><strong>ps -ef 各个字段含义</strong></p><blockquote><p>UID：表示用户ID</p><p>PID：表示进程ID</p><p>PPID：表示父进程号</p><p>C：表示CPU的占用率</p><p>STIME：进程的启动时间</p><p>TTY：登入者的终端机位置</p><p>TIME：表示进程执行起到现在总的CPU占用时间</p><p>CMD：表示启动这个进程的命令</p></blockquote><h3 id="查找特定进程"><a href="#查找特定进程" class="headerlink" title="查找特定进程"></a>查找特定进程</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="显示所有进程更详细的信息，包括进程占用CPU、内存使用率"><a href="#显示所有进程更详细的信息，包括进程占用CPU、内存使用率" class="headerlink" title="显示所有进程更详细的信息，包括进程占用CPU、内存使用率"></a>显示所有进程更详细的信息，包括进程占用CPU、内存使用率</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -aux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img.rockche.cn//image-20210721172209531.png" alt="image-20210721172209531"></p><p><strong>ps -aux 各个字段含义</strong></p><blockquote><p>USER：表示哪个用户启动了这个进程</p><p>PID ：进程ID</p><p>%CPU：进程CPU的占用率</p><p>%MEM：进程物理内存的占用率</p><p>VSZ ：进程占用的虚拟内存量 (Kbytes)</p><p>RSS ：进程当前实际上占用了多少内存</p><p>TTY ：进程是在哪个终端机上面运作，若与终端机无关，则显示 ?</p><p>STAT：该程序目前的状态，主要的状态有</p><ul><li>　　R ：运行；该程序目前正在运作，或者是可被运作</li><li>　　D：不可中断：一般是IO进程</li><li>　　S ：中断；该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。</li><li>　　T ：停止：该程序目前正在侦测或者是停止了</li><li>　　Z ：僵尸：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (僵尸) 程序的状态</li></ul><p>START：该进程启动的时间点</p><p>TIME ：进程从启动后到现在，实际占用CPU的总时间</p><p>COMMAND：启动该进程的命令</p></blockquote><h3 id="根据CPU、内存使用率降序排列"><a href="#根据CPU、内存使用率降序排列" class="headerlink" title="根据CPU、内存使用率降序排列"></a>根据CPU、内存使用率降序排列</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -aux --sort -pcpu<span class="token function">ps</span> -aux --sort -pmem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><h3 id="查看所有进程的资源占用情况"><a href="#查看所有进程的资源占用情况" class="headerlink" title="查看所有进程的资源占用情况"></a>查看所有进程的资源占用情况</h3><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="监控每个逻辑CPU的状况"><a href="#监控每个逻辑CPU的状况" class="headerlink" title="监控每个逻辑CPU的状况"></a>监控每个逻辑CPU的状况</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span>  ，按 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="高亮显示当前运行进程"><a href="#高亮显示当前运行进程" class="headerlink" title="高亮显示当前运行进程"></a>高亮显示当前运行进程</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> ，按 b <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="显示-完整命令"><a href="#显示-完整命令" class="headerlink" title="显示 完整命令"></a>显示 完整命令</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> ，按 c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="切换显示CPU"><a href="#切换显示CPU" class="headerlink" title="切换显示CPU"></a>切换显示CPU</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="按CPU使用率从大到小排序"><a href="#按CPU使用率从大到小排序" class="headerlink" title="按CPU使用率从大到小排序"></a>按CPU使用率从大到小排序</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="切换显示Memory"><a href="#切换显示Memory" class="headerlink" title="切换显示Memory"></a>切换显示Memory</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="按Memory占用率从大到小排序"><a href="#按Memory占用率从大到小排序" class="headerlink" title="按Memory占用率从大到小排序"></a>按Memory占用率从大到小排序</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="按累计运行时间Time从大到小排序"><a href="#按累计运行时间Time从大到小排序" class="headerlink" title="按累计运行时间Time从大到小排序"></a>按累计运行时间Time从大到小排序</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="高亮CPU列"><a href="#高亮CPU列" class="headerlink" title="高亮CPU列"></a>高亮CPU列</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="彩色高亮显示"><a href="#彩色高亮显示" class="headerlink" title="彩色高亮显示"></a>彩色高亮显示</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按ztop，按shift+z 可以调配色方案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="通过”shift-gt-”或”shift-lt-”可以向右或左改变排序列"><a href="#通过”shift-gt-”或”shift-lt-”可以向右或左改变排序列" class="headerlink" title="通过”shift + &gt;”或”shift + &lt;”可以向右或左改变排序列"></a><strong>通过”shift + &gt;”或”shift + &lt;”可以向右或左改变排序列</strong></h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span> <span class="token builtin class-name">shift</span> + <span class="token operator">></span>或shift + <span class="token operator">&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="忽略闲置和僵死进程"><a href="#忽略闲置和僵死进程" class="headerlink" title="忽略闲置和僵死进程"></a>忽略闲置和僵死进程</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="杀掉进程"><a href="#杀掉进程" class="headerlink" title="杀掉进程"></a>杀掉进程</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按k，输入PID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="改变内存的显示单位，默认为KB"><a href="#改变内存的显示单位，默认为KB" class="headerlink" title="改变内存的显示单位，默认为KB"></a>改变内存的显示单位，默认为KB</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top，按e （针对列表）top，按E （针对头部统计信息）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="退出top程序"><a href="#退出top程序" class="headerlink" title="退出top程序"></a>退出top程序</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">按 q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><h3 id="下载test-jpg文件"><a href="#下载test-jpg文件" class="headerlink" title="下载test.jpg文件"></a>下载test.jpg文件</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://xxx（文件地址）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="下载test-jpg文件，并存储名为test-demo-jpg"><a href="#下载test-jpg文件，并存储名为test-demo-jpg" class="headerlink" title="下载test.jpg文件，并存储名为test_demo.jpg"></a>下载test.jpg文件，并存储名为test_demo.jpg</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -o test_demo.jpg http://xxx（文件地址）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="下载test-jpg文件，后台形式下载"><a href="#下载test-jpg文件，后台形式下载" class="headerlink" title="下载test.jpg文件，后台形式下载"></a>下载test.jpg文件，后台形式下载</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -b http://xxx（文件地址）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><h3 id="删除-root-Test-目录下的文件Test-ini-（系统会询问是否删除）"><a href="#删除-root-Test-目录下的文件Test-ini-（系统会询问是否删除）" class="headerlink" title="删除/root/Test/目录下的文件Test.ini （系统会询问是否删除）"></a>删除/root/Test/目录下的文件Test.ini （系统会询问是否删除）</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /root/Test/Test.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="强制删除-root-Test-目录下的文件Test-ini（直接删除，系统不会提示）"><a href="#强制删除-root-Test-目录下的文件Test-ini（直接删除，系统不会提示）" class="headerlink" title="强制删除/root/Test/目录下的文件Test.ini（直接删除，系统不会提示）"></a>强制删除/root/Test/目录下的文件Test.ini（直接删除，系统不会提示）</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -f /root/Test/Test.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="删除-root-Test-目录下的所有-log文件"><a href="#删除-root-Test-目录下的所有-log文件" class="headerlink" title="删除/root/Test/目录下的所有.log文件"></a>删除/root/Test/目录下的所有.log文件</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -f /root/Test/*.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="删除-root-Test-目录下的-demo-文件夹"><a href="#删除-root-Test-目录下的-demo-文件夹" class="headerlink" title="删除/root/Test/目录下的 demo/文件夹"></a>删除/root/Test/目录下的 demo/文件夹</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -r /root/Test/demo/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="强制删除-root-Test-目录下的-demo-文件夹"><a href="#强制删除-root-Test-目录下的-demo-文件夹" class="headerlink" title="强制删除/root/Test/目录下的 demo/文件夹"></a>强制删除/root/Test/目录下的 demo/文件夹</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf /root/Test/demo/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="删除-root-Test-目录下的所有内容"><a href="#删除-root-Test-目录下的所有内容" class="headerlink" title="删除/root/Test/目录下的所有内容"></a>删除/root/Test/目录下的所有内容</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf /root/Test/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="创建文件命令"><a href="#创建文件命令" class="headerlink" title="创建文件命令"></a>创建文件命令</h2><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><h4 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> Test.ini  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="同时创建两个文件"><a href="#同时创建两个文件" class="headerlink" title="同时创建两个文件"></a>同时创建两个文件</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> test1.txt test2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="批量创建文件（如创建2000个文件）"><a href="#批量创建文件（如创建2000个文件）" class="headerlink" title="批量创建文件（如创建2000个文件）"></a>批量创建文件（如创建2000个文件）</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> test<span class="token punctuation">&#123;</span>0001<span class="token punctuation">..</span><span class="token number">2000</span><span class="token punctuation">&#125;</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="vi和vim"><a href="#vi和vim" class="headerlink" title="vi和vim"></a>vi和vim</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><blockquote><dl><dt>进入文档后，点击 i 进入insert模式，在文档中输入文字，在当前光标处编辑，文档下面会有insert的标识<br>进入文档后，点击 a 可以编辑光标下一位<br>退出编辑状态后，输入 Shift + g 即可立刻跳转到本文档最后<br>点击 esc 按钮可以退出编辑状态</dt><dd>输入冒号可以输入文档相关的指令<br>wq 表示保存并退出<br>q 表示退出<br>q! 强制退出，不保存修改的内容<br>退出编辑状态，点击 x 键可以删除1个字符，一次有效<br>退出编辑状态，点击 dd 可以删除一行字符<br>退出编辑状态，点击 r + 要替换的内容，即可将当前内容替换</dd></dl></blockquote><h3 id="使用-gt-、-gt-gt"><a href="#使用-gt-、-gt-gt" class="headerlink" title="使用&gt;、&gt;&gt;"></a>使用&gt;、&gt;&gt;</h3><h4 id="gt"><a href="#gt" class="headerlink" title="&gt;"></a>&gt;</h4><p>直接覆盖原文件，不会有任何提示</p><h4 id="gt-gt"><a href="#gt-gt" class="headerlink" title="&gt;&gt;"></a>&gt;&gt;</h4><p>追加在原文件末尾，不会覆盖原文件的内容</p><h4 id="直接用-gt-创建空文件"><a href="#直接用-gt-创建空文件" class="headerlink" title="直接用&gt;创建空文件"></a>直接用&gt;创建空文件</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> test.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h4 id="ls-创建文件（将结果写入文件）"><a href="#ls-创建文件（将结果写入文件）" class="headerlink" title="ls 创建文件（将结果写入文件）"></a>ls 创建文件（将结果写入文件）</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">></span> test.ini<span class="token function">ls</span> <span class="token operator">>></span> test.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="grep-创建文件（将结果写入文件）"><a href="#grep-创建文件（将结果写入文件）" class="headerlink" title="grep 创建文件（将结果写入文件）"></a>grep 创建文件（将结果写入文件）</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">></span>test.ini<span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">>></span>test.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="echo-创建文件（将结果写入文件）"><a href="#echo-创建文件（将结果写入文件）" class="headerlink" title="echo 创建文件（将结果写入文件）"></a>echo 创建文件（将结果写入文件）</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span> <span class="token operator">></span> test.ini<span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span> <span class="token operator">>></span> test.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="cat-创建文件"><a href="#cat-创建文件" class="headerlink" title="cat 创建文件"></a>cat 创建文件</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token number">1</span>.txt <span class="token operator">></span> <span class="token number">2</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>cat命令可以一次显示整个文件，如果文件比较大，使用不是很方便；适用于文件内容少的情况。</p><h4 id="cd-创建文件"><a href="#cd-创建文件" class="headerlink" title="cd 创建文件"></a>cd 创建文件</h4><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token operator">></span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>cd最主要的作用是切换目录，在cd后面跟&gt;或&gt;&gt;再加上文件名就可以创建一个内容为空的文件。它和echo的区别之处在于echo可写文件内容，而cd并不能</p><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><h3 id="显示文件的前5行（两种方式）"><a href="#显示文件的前5行（两种方式）" class="headerlink" title="显示文件的前5行（两种方式）"></a>显示文件的前5行（两种方式）</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> -n <span class="token number">5</span> test.txt<span class="token function">head</span> -5 test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="显示文件的前100个字符"><a href="#显示文件的前100个字符" class="headerlink" title="显示文件的前100个字符"></a>显示文件的前100个字符</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> -c <span class="token number">100</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="显示文件的第10-20行"><a href="#显示文件的第10-20行" class="headerlink" title="显示文件的第10-20行"></a>显示文件的第10-20行</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> -20 test.txt <span class="token operator">|</span> <span class="token function">tail</span> -10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><h3 id="获取test-txt文件所有内容"><a href="#获取test-txt文件所有内容" class="headerlink" title="获取test.txt文件所有内容"></a>获取test.txt文件所有内容</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="无论是否为空行，都显示行号"><a href="#无论是否为空行，都显示行号" class="headerlink" title="无论是否为空行，都显示行号"></a>无论是否为空行，都显示行号</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> -n test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="显示行号，除了空行"><a href="#显示行号，除了空行" class="headerlink" title="显示行号，除了空行"></a>显示行号，除了空行</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> -b test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="连续读取两个文件，按顺序输出"><a href="#连续读取两个文件，按顺序输出" class="headerlink" title="连续读取两个文件，按顺序输出"></a>连续读取两个文件，按顺序输出</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> test1.txt test2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="倒序输出"><a href="#倒序输出" class="headerlink" title="倒序输出"></a>倒序输出</h3><p>cat倒过来写即可</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tac</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="nl命令"><a href="#nl命令" class="headerlink" title="nl命令"></a>nl命令</h2><h3 id="显示行号，除了空行-1"><a href="#显示行号，除了空行-1" class="headerlink" title="显示行号，除了空行"></a>显示行号，除了空行</h3><p>默认就是这个</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nl</span> test.txt<span class="token function">nl</span> -b t test.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="无论是否为空行，都显示行号-1"><a href="#无论是否为空行，都显示行号-1" class="headerlink" title="无论是否为空行，都显示行号"></a>无论是否为空行，都显示行号</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nl</span> -b a test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="行号靠最左显示"><a href="#行号靠最左显示" class="headerlink" title="行号靠最左显示"></a>行号靠最左显示</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nl</span> -n <span class="token function">ln</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img.rockche.cn//image-20210722164919771.png" alt="image-20210722164919771"></p><h3 id="行号靠最右显示"><a href="#行号靠最右显示" class="headerlink" title="行号靠最右显示"></a>行号靠最右显示</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nl</span> -n rn test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img.rockche.cn//image-20210722164946206.png" alt="image-20210722164946206"> </p><h3 id="行号靠最右显示，不足位数左边补0"><a href="#行号靠最右显示，不足位数左边补0" class="headerlink" title="行号靠最右显示，不足位数左边补0"></a>行号靠最右显示，不足位数左边补0</h3><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nl</span> -n rz test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="https://img.rockche.cn//image-20210722165017324.png" alt="image-20210722165017324"></p><p>Linux 查看端口占用情况可以使用 <strong>lsof</strong> 和 <strong>netstat</strong> 命令。</p><hr><h2 id="lsof命令"><a href="#lsof命令" class="headerlink" title="lsof命令"></a>lsof命令</h2><p>lsof(list open files)是一个列出当前系统打开文件的工具。</p><p>lsof 查看端口占用语法格式：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">lsof -i:端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>查看服务器 8000 端口的占用情况：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># lsof -i:8000COMMAND   PID USER   FD   TYPE   DEVICE SIZE&#x2F;OFF NODE NAMEnodejs  26993 root   10u  IPv4 37999514      0t0  TCP *:8000 (LISTEN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>可以看到 8000 端口已经被轻 nodejs 服务占用。</p><p>lsof -i 需要 root 用户的权限来执行，如下图：</p><p><img src="https://img.rockche.cn//image-20210827172125586.png" alt="image-20210827172125586"></p><p>更多 lsof 的命令如下：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">lsof -i:8080：查看8080端口占用lsof abc.txt：显示开启文件abc.txt的进程lsof -c abc：显示abc进程现在打开的文件lsof -c -p 1234：列出进程号为1234的进程所打开的文件lsof -g gid：显示归属gid的进程情况lsof +d &#x2F;usr&#x2F;local&#x2F;：显示目录下被进程开启的文件lsof +D &#x2F;usr&#x2F;local&#x2F;：同上，但是会搜索目录下的目录，时间较长lsof -d 4：显示使用fd为4的进程lsof -i -U：显示所有打开的端口和UNIX domain文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><hr><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p><strong>netstat -tunlp</strong> 用于显示 tcp，udp 的端口和进程等相关情况。</p><p>netstat 查看端口占用语法格式：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">netstat -tunlp | grep 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li>-t (tcp) 仅显示tcp相关选项</li><li>-u (udp)仅显示udp相关选项</li><li>-n 拒绝显示别名，能显示数字的全部转化为数字</li><li>-l 仅列出在Listen(监听)的服务状态</li><li>-p 显示建立相关链接的程序名</li></ul><p>例如查看 8000 端口的情况，使用以下命令：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># netstat -tunlp | grep 8000tcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      26993&#x2F;nodejs   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>更多命令：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">netstat -ntlp   &#x2F;&#x2F;查看当前所有tcp端口netstat -ntulp | grep 80   &#x2F;&#x2F;查看所有80端口使用情况netstat -ntulp | grep 3306   &#x2F;&#x2F;查看所有3306端口使用情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><hr><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>在查到端口占用的进程后，如果你要杀掉对应的进程可以使用 kill 命令：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">kill -9 PID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>如上实例，我们看到 8000 端口对应的 PID 为 26993，使用以下命令杀死进程：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">kill -9 26993<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest12-配置文件pytest.ini</title>
    <link href="/2021/07/15/Pytest12-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6pytest.ini/"/>
    <url>/2021/07/15/Pytest12-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6pytest.ini/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pytest配置文件可以改变pytest的运行方式，它是一个固定的文件pytest.ini文件，读取配置信息，按指定的方式去运行。</p><h2 id="常用的配置项"><a href="#常用的配置项" class="headerlink" title="常用的配置项"></a>常用的配置项</h2><h3 id="marks"><a href="#marks" class="headerlink" title="marks"></a>marks</h3><p>作用：测试用例中添加了自定义标记（ @pytest.mark.xxx 装饰器），如果不添加marks选项的话，就会报warnings</p><p>格式：list列表类型</p><p>写法：</p><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[pytest]</span><span class="token comment"># 自定义标记说明</span><span class="token constant">markers</span> <span class="token attr-value"><span class="token punctuation">=</span></span>    tencent: tencent    toutiao: toutiao    alibaba: alibaba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="xfail-strict"><a href="#xfail-strict" class="headerlink" title="xfail_strict"></a>xfail_strict</h3><p>作用：设置xfail_strict = True可以让那些标记为@pytest.mark.xfail但实际通过显示XPASS的测试用例被报告为失败</p><p>格式：True 、False（默认），1、0</p><p>写法：</p><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[pytest]</span><span class="token comment"># 自定义标记说明</span><span class="token constant">markers</span> <span class="token attr-value"><span class="token punctuation">=</span></span>    tencent: tencent    toutiao: toutiao    alibaba: alibaba<span class="token constant">xfail_strict</span> <span class="token attr-value"><span class="token punctuation">=</span> True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>xfail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">"a"</span>    b <span class="token operator">=</span> <span class="token string">"b"</span>    <span class="token keyword">assert</span> a <span class="token operator">!=</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>未设置 xfail_strict = True 时，测试结果显示xpassed</li></ul><p><img src="https://img.rockche.cn//image-20210715165036370.png" alt="image-20210715165036370"></p><ul><li>已设置 xfail_strict = True 时，测试结果显示failed</li></ul><p><img src="https://img.rockche.cn//image-20210715165109107.png" alt="image-20210715165109107"></p><h3 id="addopts"><a href="#addopts" class="headerlink" title="addopts"></a>addopts</h3><p>作用：addopts参数可以更改默认命令行选项，这个当我们在cmd输入一堆指令去执行用例的时候，就可以用该参数代替了，省去重复性的敲命令工作</p><p>比如：想测试完生成报告，失败重跑两次，一共运行两次，如果在cmd中写的话，命令会很长</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pytest -v --rerun<span class="token operator">=</span><span class="token number">2</span> --count<span class="token operator">=</span><span class="token number">2</span> --html<span class="token operator">=</span>report.html --self-contained-html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>每次都这样敲不太现实，addopts就可以完美解决这个问题</p><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[pytest]</span><span class="token comment"># 自定义标记说明</span><span class="token constant">markers</span> <span class="token attr-value"><span class="token punctuation">=</span></span>    tencent: tencent    toutiao: toutiao    alibaba: alibaba<span class="token constant">xfail_strict</span> <span class="token attr-value"><span class="token punctuation">=</span> True</span><span class="token comment"># 命令行参数</span><span class="token constant">addopts</span> <span class="token attr-value"><span class="token punctuation">=</span> -v --reruns=1 --count=2 --html=reports.html --self-contained-html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="log-cli"><a href="#log-cli" class="headerlink" title="log_cli"></a>log_cli</h3><p>作用：控制台实时输出日志</p><p>格式：log_cli=True 或False（默认），或者log_cli=1 或 0</p><h4 id="log-cli-0运行结果"><a href="#log-cli-0运行结果" class="headerlink" title="log_cli=0运行结果"></a>log_cli=0运行结果</h4><p><img src="https://img.rockche.cn//image-20210715165838558.png" alt="image-20210715165838558"></p><h4 id="log-cli-1运行结果"><a href="#log-cli-1运行结果" class="headerlink" title="log_cli=1运行结果"></a>log_cli=1运行结果</h4><p><img src="https://img.rockche.cn//image-20210715165852877.png" alt="image-20210715165852877"></p><p>加了log_cli=1之后，可以清晰看到哪个package下的哪个module下的哪个测试用例是否passed还是failed</p><h3 id="norecursedirs"><a href="#norecursedirs" class="headerlink" title="norecursedirs"></a>norecursedirs</h3><p>作用：pytest 收集测试用例时，会递归遍历所有子目录，包括某些你明知道没必要遍历的目录，遇到这种情况，可以使用 norecursedirs 参数简化 pytest 的搜索工作</p><p>默认设置： norecursedirs = .* build dist CVS _darcs {arch} *.egg </p><p>正确写法：多个路径用空格隔开</p><p>举个🌰，想要不遍历 venv、src、resources、log、report、util文件夹，可以进行如下设置</p><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[pytest]</span><span class="token constant">norecursedirs</span> <span class="token attr-value"><span class="token punctuation">=</span> .* build dist CVS _darcs &#123;arch&#125; *.egg venv src resources log report util</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h3 id="更改测试用例收集规则"><a href="#更改测试用例收集规则" class="headerlink" title="更改测试用例收集规则"></a>更改测试用例收集规则</h3><p>pytest默认的测试用例收集规则</p><blockquote><p>文件名以 test_*.py 文件和 *_test.py</p><p>以 test_ 开头的函数</p><p>以 Test 开头的类，不能包含 <strong>init</strong> 方法</p><p>以 test_ 开头的类里面的方法</p></blockquote><p> 我们是可以修改或者添加这个用例收集规则的（建议在原有的规则上添加），如下配置</p><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[pytest]</span><span class="token constant">python_files</span> <span class="token attr-value"><span class="token punctuation">=</span>     test_*  *_test  test*</span><span class="token constant">python_classes</span> <span class="token attr-value"><span class="token punctuation">=</span>   Test*   test*</span><span class="token constant">python_functions</span> <span class="token attr-value"><span class="token punctuation">=</span> test_*  test*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>pytest.ini文件应该放在项目根目录下，不要修改名字，否则无法被识别</p><h2 id="整理参考"><a href="#整理参考" class="headerlink" title="整理参考"></a>整理参考</h2><p><a href="https://www.cnblogs.com/poloyy/p/12702294.html">小菠萝测试笔记</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest11-重复执行用例插件pytest-repeat</title>
    <link href="/2021/07/13/Pytest11-%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E7%94%A8%E4%BE%8B%E6%8F%92%E4%BB%B6pytest-repeat/"/>
    <url>/2021/07/13/Pytest11-%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E7%94%A8%E4%BE%8B%E6%8F%92%E4%BB%B6pytest-repeat/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在平时做测试的时候，经常会遇到一些偶现的bug，通常我们会多次执行来复现此类bug，那么在自动化测试的时候，如何多次运行某个或某些用例呢，我们可以使用pytest-repeat这个插件来帮助我们重复的去执行用例</p><h2 id="pytest-repeat插件"><a href="#pytest-repeat插件" class="headerlink" title="pytest-repeat插件"></a>pytest-repeat插件</h2><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>pip命令安装</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> pytest-repeat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令  <code>pytest -s --count 5  test_demo.py</code>执行</p><p>运行结果如下</p><p><img src="https://img.rockche.cn//image-20210708175609335.png" alt="image-20210708175609335"></p><p>可以看到，用例被重复执行了5次</p><h3 id="重复测试直到失败"><a href="#重复测试直到失败" class="headerlink" title="重复测试直到失败"></a>重复测试直到失败</h3><blockquote><p>当我们验证偶现的问题时，需要不停的重复执行用例，直到用例失败</p><p>可以将pytest的 -x 选项与pytest-repeat结合使用，以强制测试运行程序在第一次失败时停</p></blockquote><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> random    flag <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">assert</span> flag <span class="token operator">!=</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令  <code>pytest --count 5 -x  test_demo.py</code>执行</p><p>运行结果如下</p><p><img src="https://img.rockche.cn//image-20210714173546412.png" alt="image-20210714173546412"></p><p>可以看到，在运行了55次后，用例执行失败</p><h3 id="标记要重复多次的测试"><a href="#标记要重复多次的测试" class="headerlink" title="标记要重复多次的测试"></a>标记要重复多次的测试</h3><p>如果要在代码中将某些测试用例标记为执行重复多次，可以使用 <code>@pytest.mark.repeat(count)</code> </p><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">test_repeat1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例1执行"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_repeat2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例2执行"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_repeat3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例3执行"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令  <code>pytest -s test_demo.py</code>执行</p><p>运行结果如下</p><p><img src="https://img.rockche.cn//image-20210714174143630.png" alt="image-20210714174143630"></p><p>可以看到，用例2被执行了5次</p><h3 id="–repeat-scope"><a href="#–repeat-scope" class="headerlink" title="–repeat-scope"></a>–repeat-scope</h3><p>作用：类似于pytest fixture的scope参数，–repeat-scope也可以设置参数： <code>session</code> ， <code>module</code>，<code>class</code>或者<code>function</code>（默认值）</p><blockquote><ul><li>function：默认，范围针对每个用例重复执行，再执行下一个用例</li><li>class：以class为用例集合单位，重复执行class里面的用例，再执行下一个</li><li>module：以模块为单位，重复执行模块里面的用例，再执行下一个</li><li>session：重复整个测试会话，即所有测试用例的执行一次，然后再执行第二次</li></ul></blockquote><h4 id="重复执行class中的用例"><a href="#重复执行class中的用例" class="headerlink" title="重复执行class中的用例"></a>重复执行class中的用例</h4><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_repeat1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例执行1"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_repeat2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例执行2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令  <code> pytest -s --count=2 --repeat-scope=class test_demo.py</code>执行</p><p>运行结果如下</p><p><img src="https://img.rockche.cn//image-20210714174917068.png" alt="image-20210714174917068"></p><p>可以看到，两个测试类都执行了2次</p><h4 id="重复执行module中的用例"><a href="#重复执行module中的用例" class="headerlink" title="重复执行module中的用例"></a>重复执行module中的用例</h4><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_repeat1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例执行1"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_repeat2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例执行2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_repeat3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例执行3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令  <code> pytest -s --count=2 --repeat-scope=module test_demo.py</code>执行</p><p>运行结果如下</p><p><img src="https://img.rockche.cn//image-20210714175321251.png" alt="image-20210714175321251"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>pytest-repeat不能与unittest.TestCase测试类一起使用。无论–count设置多少，这些测试始终仅运行一次，并显示警告</p><h3 id="整理参考"><a href="#整理参考" class="headerlink" title="整理参考"></a>整理参考</h3><p><a href="https://www.cnblogs.com/poloyy/p/12691240.html">小菠萝测试笔记</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux1-Linux与Shell介绍</title>
    <link href="/2021/07/05/Linux1-Linux%E4%B8%8EShell%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/07/05/Linux1-Linux%E4%B8%8EShell%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h2><p>回顾一下操作系统的发展史，可以分为四大时代</p><ul><li><p>第一个是OS时代，这个时候操作系统才刚刚成型，1973 年由贝尔实验室开发的UNIX 系统，以及 1982 年与 1991年在 UNIX 系统基础上进行扩展定制的若干变种</p></li><li><p>第二个时代是 PC 时代，PC 时代崛起于 1975 年，当年乔布斯开发了 Apple 系统，随后 1980 年，比尔盖茨开发了 DOS 系统，从这时起更多的人开始接触操作系统，个人计算机得以普及</p></li><li><p>第三个时代是 GUI 时代，GUI 时代的代表作是 1979 年乔布斯开发的 Mac 系统与 1990 年比尔盖茨开发的 Windows 系统，以及 1994 年的 Linux 系统，这三个系统影响了整个时代，一直到现在仍被广泛使用</p></li><li><p>第四个时代是移动 OS 时代，随着移动互联网的发展，移动 OS 也变得越来越重要，在移动 OS 时代，最知名的是 Google 的 Android 系统，以及乔布斯的 iOS 系统</p></li></ul><h2 id="Bash介绍"><a href="#Bash介绍" class="headerlink" title="Bash介绍"></a>Bash介绍</h2><p>Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。</p><h3 id="Shell的含义"><a href="#Shell的含义" class="headerlink" title="Shell的含义"></a>Shell的含义</h3><p>学习 Bash，首先需要理解 Shell 是什么。Shell 这个单词的原意是“外壳”，跟 kernel（内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。</p><p>具体来说，Shell 这个词有多种含义。</p><p>首先，Shell 是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（command line interface，简写为 CLI）。Shell 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。本书中，除非特别指明，Shell 指的就是命令行环境。</p><p>其次，Shell 是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为脚本（script）。这些脚本都通过 Shell 的解释执行，而不通过编译。</p><p>最后，Shell 是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。</p><h3 id="Shell的种类"><a href="#Shell的种类" class="headerlink" title="Shell的种类"></a>Shell的种类</h3><p>在 Linux 系统中你可以通过 cat 指令来查看 etc/ 下的 shells，可以看到本地支持的 Shell 种类非常多，常见的有 bash、csh、ksh、sh，等等。其中，sh 是 Bash 的早期形态，因为 sh 不是 GNU 项目，所以后期又开发了 Bash。</p><p>在 Windows 系统中，是没有 Shell 环境的，Windows 下的 Shell 其实叫作 command，现在升级为 PowerShell，但是 Windows 指令与 Linux 系统并不兼容，因为它本身不是从 Linux/Unix 系统衍生出来的，所以导致 Windows 与目前的OS，如：Mac、Linux、Android、iOS 的命令不兼容。为了解决这个问题，在 Windows 中你可以使用 Git bash，以及 Cygwin 来模拟 Shell 环境。</p><p>如果你的系统是 Mac，那么恭喜你，Mac 系统自带了 Terminal，你还可以安装  iTerm2，它们都是标准的 Shell 环境。在 Linux 环境下，建议你使用 Bash，Bash 是目前行业内使用最广泛的 Shell 环境，在 Windows 环境下，建议你使用 Git bash，它几乎包含了 Linux 常用的全部指令。</p><h3 id="命令行环境"><a href="#命令行环境" class="headerlink" title="命令行环境"></a>命令行环境</h3><h4 id="终端模拟器"><a href="#终端模拟器" class="headerlink" title="终端模拟器"></a>终端模拟器</h4><p>如果是不带有图形环境的 Linux 系统（比如专用于服务器的系统），启动后就直接是命令行环境。</p><p>不过，现在大部分的 Linux 发行版，尤其是针对普通用户的发行版，都是图形环境。用户登录系统后，自动进入图形环境，需要自己启动终端模拟器，才能进入命令行环境。</p><p>所谓“终端模拟器”（terminal emulator）就是一个模拟命令行窗口的程序，让用户在一个窗口中使用命令行环境，并且提供各种附加功能，比如调整颜色、字体大小、行距等等。</p><p>不同 Linux 发行版（准确地说是不同的桌面环境）带有的终端程序是不一样的，比如 KDE 桌面环境的终端程序是 konsole，Gnome 桌面环境的终端程序是 gnome-terminal，用户也可以安装第三方的终端程序。所有终端程序，尽管名字不同，基本功能都是一样的，就是让用户可以进入命令行环境，使用 Shell。</p><h4 id="命令行提示符"><a href="#命令行提示符" class="headerlink" title="命令行提示符"></a>命令行提示符</h4><p>进入命令行环境以后，用户会看到 Shell 的提示符。提示符往往是一串前缀，最后以一个美元符号<code>$</code>结尾，用户可以在这个符号后面输入各种命令</p><p><img src="https://img.rockche.cn//image-20210705164233888.png" alt="image-20210705164233888"></p><h4 id="进入和退出方法"><a href="#进入和退出方法" class="headerlink" title="进入和退出方法"></a>进入和退出方法</h4><p>进入命令行环境以后，一般就已经打开 Bash 了。如果你的 Shell 不是 Bash，可以输入<code>bash</code>命令启动 Bash。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>退出 Bash 环境，可以使用<code>exit</code>命令，也可以同时按下<code>Ctrl + d</code>。</p><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="第一行命令"><a href="#第一行命令" class="headerlink" title="第一行命令"></a>第一行命令</h3><p>我自己的电脑是Mac系统，并且安装了iTeam，输入<code>echo hello shell</code> ，显示如下</p><p><img src="https://img.rockche.cn//image-20210705165000639.png" alt="image-20210705165000639"></p><h2 id="整理参考"><a href="#整理参考" class="headerlink" title="整理参考"></a>整理参考</h2><p><a href="https://wangdoc.com/bash/intro.html">网道（WangDoc.com）</a></p><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=17#/detail/pc?id=319">测试开发核心技术 46 讲</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest10-生成html报告</title>
    <link href="/2021/07/03/Pytest10-%E7%94%9F%E6%88%90html%E6%8A%A5%E5%91%8A/"/>
    <url>/2021/07/03/Pytest10-%E7%94%9F%E6%88%90html%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在pytest中，如何生成html测试报告呢，pytest提供了pytest-html插件，可以帮助我们生成测试报告，当然，如果希望生成更加精美的测试报告，我们还可以使用allure生成报告，下面我们就来详细看看如何实现吧</p><h2 id="pytest-html插件"><a href="#pytest-html插件" class="headerlink" title="pytest-html插件"></a>pytest-html插件</h2><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>pip命令安装</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> pytest-html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p>使用方法很简单，在测试用例的目录下执行命令 <code>pytest --html=reportname.html</code> 即可</p><p>生成的报告效果如下：</p><p><img src="https://img.rockche.cn//image-20210705141619343.png" alt="image-20210705141619343"></p><h4 id="合并css"><a href="#合并css" class="headerlink" title="合并css"></a>合并css</h4><p>使用上面的命令生成报告后，css是独立的，分享报告出去的时候样式会丢失，我们可以使用如下命令把css样式合并到html里</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pytest --html<span class="token operator">=</span>report.html --self-contained-html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="allure生成报告"><a href="#allure生成报告" class="headerlink" title="allure生成报告"></a>allure生成报告</h2><h3 id="allure介绍"><a href="#allure介绍" class="headerlink" title="allure介绍"></a>allure介绍</h3><p>Allure 是一款轻量级的开源自动化测试报告生成框架。它支持绝大部分测试框架，比如 TestNG、Junit 、Pytest、unittest 等</p><h3 id="安装allure"><a href="#安装allure" class="headerlink" title="安装allure"></a>安装allure</h3><h4 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h4><p>1.因为allure依赖于java环境，所以必须先安装java环境并设置环境变量，此处略过</p><p>2.在github上下载最新版本：<a href="https://github.com/allure-framework/allure2/releases">https://github.com/allure-framework/allure2/releases</a></p><p><img src="https://img.rockche.cn//image-20210705150235745.png" alt="image-20210705150235745"></p><p>3.解压后，打开<code>\bin</code>文件夹，会看到<code>allure.bat</code>文件，将此路径添加到环境变量<br>4.cmd输入<code>allure</code>出现帮助信息，表示安装成功</p><h4 id="Mac-OS-X下安装"><a href="#Mac-OS-X下安装" class="headerlink" title="Mac OS X下安装"></a>Mac OS X下安装</h4><p>使用命令<code>brew install allure</code>安装</p><h3 id="安装pytest-allure-adaptor插件"><a href="#安装pytest-allure-adaptor插件" class="headerlink" title="安装pytest-allure-adaptor插件"></a>安装pytest-allure-adaptor插件</h3><p>使用命令<code>pip install allure-pytest</code></p><h3 id="生成xml格式报告"><a href="#生成xml格式报告" class="headerlink" title="生成xml格式报告"></a>生成xml格式报告</h3><p>在运行用例的目录下执行 <code>pytest -s -q --alluredir ./report/xml</code></p><blockquote><ol><li>‘-s’:指的是快速执行</li><li>‘-q’:静默执行，删除多余的执行内容信息</li><li>‘–alluredir’:用例执行的目录</li><li>‘./report/xml’:报告xml的存放地址，不指定默认在当前目录自动生成</li></ol></blockquote><h3 id="生成html格式报告"><a href="#生成html格式报告" class="headerlink" title="生成html格式报告"></a>生成html格式报告</h3><p> 使用命令<code>allure generate report/xml -o report/html</code></p><blockquote><ol><li><code>report/xml</code> 指的是xml文件的目录</li><li><code>report/html</code> 指的是html文件的目录</li></ol></blockquote><p>注意：xml文件目录与html文件目录不能相同，必须指定一个空的目录生成最后的html报告</p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://img.rockche.cn//image-20210705153835953.png" alt="image-20210705153835953"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上便是pytest生成测试报告的两种方法了，关于allure的详细内容，将在后续的文章中介绍</p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest9-失败重跑</title>
    <link href="/2021/07/03/Pytest9-%E5%A4%B1%E8%B4%A5%E9%87%8D%E8%B7%91/"/>
    <url>/2021/07/03/Pytest9-%E5%A4%B1%E8%B4%A5%E9%87%8D%E8%B7%91/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行自动化测试的过程中，我们一定会有这样的需求：希望失败的用例可以自动重跑</p><p>在pytest中，提供了pytest-rerunfailures插件可以实现自动重跑的效果</p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>pip命令安装</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> pytest-rerunfailures<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><h3 id="重新运行所有失败的用例"><a href="#重新运行所有失败的用例" class="headerlink" title="重新运行所有失败的用例"></a>重新运行所有失败的用例</h3><p>如果需要把所有失败的用例都重新运行，使用 –reruns 命令，并且制定要运行的最大次数</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行setup_class"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">teardown_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行teardown_class"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">3</span>    <span class="token keyword">def</span> <span class="token function">test_case2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例2"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">6</span>    <span class="token keyword">def</span> <span class="token function">test_case3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例3"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令<code>pytest --reruns 2 -s</code> 执行，结果如下</p><p><img src="https://img.rockche.cn//image-20210703221946118.png" alt="image-20210703221946118"></p><p>可以看到，case1和case2被重新执行了2次</p><p>如果希望在每次重新执行之间加上间隔时间，可以使用 <code>--reruns-delay</code> 命令行选项，指定下次测试重新开始之前等待的秒数</p><p>如 <code>pytest --reruns 2 --reruns-delay 5 -s</code>，代表自动重跑2次，每次间隔5s</p><h3 id="重新运行指定的用例"><a href="#重新运行指定的用例" class="headerlink" title="重新运行指定的用例"></a>重新运行指定的用例</h3><p>如果我们在测试时，只希望在某一条测试用例失败后重新执行该如何处理呢</p><p>可以使用flaky装饰器 @pytest.mark.flaky(reruns=<em>, reruns_delay=</em>)</p><blockquote><p>参数说明</p><ul><li>reruns  重跑次数</li><li>reruns_delay 重新运行的等待时间</li></ul></blockquote><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>flaky</span><span class="token punctuation">(</span>reruns<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> reruns_delay<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token keyword">def</span> <span class="token function">test_case2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例2"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token keyword">def</span> <span class="token function">test_case3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例3"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210703223905568.png" alt="image-20210703223905568"></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest8-参数化</title>
    <link href="/2021/07/01/Pytest8-%E5%8F%82%E6%95%B0%E5%8C%96/"/>
    <url>/2021/07/01/Pytest8-%E5%8F%82%E6%95%B0%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在实际自动化测试中，某些测试用例是无法通过一组测试数据来达到验证效果的，所以需要通过参数化来传递多组数据</p><p>在unittest中，我们可以使用第三方库parameterized来对数据进行参数化，从而实现数据驱动测试</p><p>而在pytest中，也提供了功能强大的@pytest.mark.parametrize装饰器来实现数据参数化</p><h2 id="Pytest参数化的方式"><a href="#Pytest参数化的方式" class="headerlink" title="Pytest参数化的方式"></a>Pytest参数化的方式</h2><p>pytest有三种传参方式</p><ul><li><code>@pytest.mark.parametrize()</code>  通过装饰器方式进行参数化（最常使用）</li><li><code>pytest.fixture()</code>方式进行参数化，<code>fixture</code>装饰的函数可以作为参数传入其他函数</li><li><code>conftest.py</code>文件中存放参数化函数，可作用于模块内的所有测试用例</li></ul><span id="more"></span><h2 id="pytest-mark-parametrize实现参数化"><a href="#pytest-mark-parametrize实现参数化" class="headerlink" title="@pytest.mark.parametrize实现参数化"></a>@pytest.mark.parametrize实现参数化</h2><h3 id="装饰测试类"><a href="#装饰测试类" class="headerlink" title="装饰测试类"></a>装饰测试类</h3><p>当装饰器 @pytest.mark.parametrize 装饰测试类时，会将数据集合传递给类的所有测试用例方法</p><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token comment"># 定义测试数据</span>data1 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 定义add方法</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token comment"># 添加parametrize装饰器</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'a, b, expect'</span><span class="token punctuation">,</span> data1<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestParametrize</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_parametrize_1</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n测试用例1数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">,结果为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>expect<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> expect    <span class="token keyword">def</span> <span class="token function">test_parametrize_2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n测试用例2数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">,结果为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>expect<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> expect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210701160856783.png" alt="image-20210701160856783"></p><h3 id="装饰测试函数"><a href="#装饰测试函数" class="headerlink" title="装饰测试函数"></a>装饰测试函数</h3><h4 id="单个数据"><a href="#单个数据" class="headerlink" title="单个数据"></a>单个数据</h4><blockquote><p>当测试用例只需要一个参数时，我们使用列表存放测试数据，例如定义一个列表</p><p>data = [1，2]</p><p>使用@pytest.mark.parametrize装饰器时，第一个参数使用变量a接收列表中的每个元素，第二个参数传递存储数据的列表</p><p>在测试用例中使用同名的变量a接收测试数据，列表有多少个元素就会生成并执行多少个测试用例</p></blockquote><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestdata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_parametrize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n被加载测试数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210701162111100.png" alt="image-20210701162111100"></p><h4 id="一组数据"><a href="#一组数据" class="headerlink" title="一组数据"></a>一组数据</h4><blockquote><p>当测试用例需要多个数据时，我们可以使用嵌套序列(嵌套元组&amp;嵌套列表)的列表来存放测试数据</p><p>装饰器@pytest.mark.parametrize()可以使用单个变量接收数据，也可以使用多个变量接收，同样，测试用例函数也需要与其保持一致</p><p>当使用单个变量接收时，测试数据传递到测试函数内部时为列表中的每一个元素或者小列表，需要使用索引的方式取得每个数据</p><p>当使用多个变量接收数据时，那么每个变量分别接收小列表或元组中的每个元素</p><p>列表嵌套多少个列表或元组，测生成多少条测试用例</p></blockquote><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestdata <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'a, b, expect'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_parametrize_1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 当使用多个变量接收数据时，那么每个变量分别接收小列表或元组中的每个元素</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n测试数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">，</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">，</span><span class="token interpolation"><span class="token punctuation">&#123;</span>expect<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    actual <span class="token operator">=</span> a <span class="token operator">+</span> b    <span class="token keyword">assert</span> actual <span class="token operator">==</span> expect<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_parametrize_2</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>当使用单个变量接收时，测试数据传递到测试函数内部时为列表中的每一个元素或者小列表，需要使用索引的方式取得每个数据    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n测试数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    actual <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">assert</span> actual <span class="token operator">==</span> value<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210701163343794.png" alt="image-20210701163343794"></p><h4 id="组合数据"><a href="#组合数据" class="headerlink" title="组合数据"></a>组合数据</h4><blockquote><p>一个测试函数还可以同时被多个参数化装饰器装饰，多个装饰器中的数据会进行交叉组合的方式传递给测试函数，进而生成n*n个测试用例，这也为我们的测试设计时提供了方便</p></blockquote><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestdata_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>data_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> data_1<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> data_2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_parametrize_1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n测试数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">，</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210701164355094.png" alt="image-20210701164355094"></p><h4 id="标记用例"><a href="#标记用例" class="headerlink" title="标记用例"></a>标记用例</h4><blockquote><p>当我们不想执行某组测试数据时，我们可以标记skip或skipif</p><p>当我们预期某组数据会执行失败时，我们可以标记为xfail</p></blockquote><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestdata1 <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    pytest<span class="token punctuation">.</span>param<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> marks<span class="token operator">=</span>pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>xfail<span class="token punctuation">)</span><span class="token punctuation">,</span>    pytest<span class="token punctuation">.</span>param<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> marks<span class="token operator">=</span>pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">"a,b,expected"</span><span class="token punctuation">,</span> data1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_mark</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'测试数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">，结果为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>expected<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> add<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> expected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210701233107572.png" alt="image-20210701233107572"></p><h4 id="嵌套字典"><a href="#嵌套字典" class="headerlink" title="嵌套字典"></a>嵌套字典</h4><blockquote><p>数据列表中也可以使用字典类型的数据</p></blockquote><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestdata_1 <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token number">2</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token number">4</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'dic'</span><span class="token punctuation">,</span> data_1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_parametrize_1</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'测试数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>dic<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210701233202805.png" alt="image-20210701233202805"></p><h3 id="增加可读性"><a href="#增加可读性" class="headerlink" title="增加可读性"></a>增加可读性</h3><h4 id="使用ids参数"><a href="#使用ids参数" class="headerlink" title="使用ids参数"></a>使用ids参数</h4><blockquote><p>参数化装饰器有一个额外的参数ids，可以标识每一个测试用例，自定义测试数据结果的显示，用来增加测试用例的可读性</p></blockquote><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestdata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'TestData-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> a <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> data <span class="token punctuation">,</span>ids<span class="token operator">=</span> ids<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_parametrize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n被加载测试数据为  </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果为</p><p><img src="https://img.rockche.cn//image-20210701234710810.png" alt="image-20210701234710810"></p><h4 id="自定义id做标识"><a href="#自定义id做标识" class="headerlink" title="自定义id做标识"></a>自定义id做标识</h4><p>除了使用ids参数增加输出可读性外，我们还可以在参数列表的参数旁边定义一个id值来做标识</p><p>上代码</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestdata <span class="token operator">=</span> <span class="token punctuation">[</span>pytest<span class="token punctuation">.</span>param<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"this is test1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pytest<span class="token punctuation">.</span>param<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"this is test2"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_parametrize</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'\n被加载测试数据为  </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210701235116235.png" alt="image-20210701235116235"></p><h2 id="pytest-fixture-方式进行参数化"><a href="#pytest-fixture-方式进行参数化" class="headerlink" title="pytest.fixture()方式进行参数化"></a>pytest.fixture()方式进行参数化</h2><p>待更新</p><h2 id="整理参考"><a href="#整理参考" class="headerlink" title="整理参考"></a>整理参考</h2><p><a href="https://www.cnblogs.com/linuxchao/p/linuxchao-pytest-parametrize.html">linxu超</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest7-skip和skipif使用</title>
    <link href="/2021/06/30/Pytest7-skip%E5%92%8Cskipif%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/06/30/Pytest7-skip%E5%92%8Cskipif%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实际的测试中，我们经常会遇到需要跳过某些测试用例的情况，pytest提供了skip和ifskip来跳过测试</p><p>下面我们就来通过一些例子看看skip和ifskip具体如何使用吧</p><h2 id="skip的用法"><a href="#skip的用法" class="headerlink" title="skip的用法"></a>skip的用法</h2><p>使用示例：@pytest.mark.skip(reason=”跳过的原因，会在执行结果中打印”)</p><span id="more"></span><h3 id="标记在测试函数中"><a href="#标记在测试函数中" class="headerlink" title="标记在测试函数中"></a>标记在测试函数中</h3><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例1"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip</span><span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"没写完，不执行此用例"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下：</p><p><img src="https://img.rockche.cn//image-20210630114004795.png" alt="image-20210630114004795"></p><h3 id="标记在测试类的测试用例中"><a href="#标记在测试类的测试用例中" class="headerlink" title="标记在测试类的测试用例中"></a>标记在测试类的测试用例中</h3><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">class</span> <span class="token class-name">TestCase</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例1"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip</span><span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"没写完，不执行此用例"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210630114543144.png" alt="image-20210630114543144"></p><h3 id="标记在测试类方法上"><a href="#标记在测试类方法上" class="headerlink" title="标记在测试类方法上"></a>标记在测试类方法上</h3><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip</span><span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"没写完，不执行此用例"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestCase1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例1"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例2"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestCase2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例3"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_4</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例4"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210630134802163.png" alt="image-20210630134802163"></p><p>总结</p><blockquote><ul><li>@pytest.mark.skip 可以加在函数上，类上，类方法上</li><li>如果加在类上面，则类里面的所有测试用例都不会执行</li></ul></blockquote><h3 id="在测试用例执行期间强制跳过"><a href="#在测试用例执行期间强制跳过" class="headerlink" title="在测试用例执行期间强制跳过"></a>在测试用例执行期间强制跳过</h3><p>以一个for循环为例，执行到第3次的时候跳出</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">test_demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"输出第【</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">】个数"</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>            pytest<span class="token punctuation">.</span>skip<span class="token punctuation">(</span><span class="token string">"跑不动了，不再执行了"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210630140439318.png" alt="image-20210630140439318"></p><h3 id="在模块级别跳过测试用例"><a href="#在模块级别跳过测试用例" class="headerlink" title="在模块级别跳过测试用例"></a>在模块级别跳过测试用例</h3><p>语法：<code>pytest.skip(msg=&quot;&quot;,allow_module_level=False)</code></p><p>当<code>allow_module_level=True</code>时，可以设置在模块级别跳过整个模块</p><div class="code-wrapper"><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import pytestpytest.skip(&quot;跳过整个模块&quot;, allow_module_level&#x3D;True)@pytest.fixture(autouse&#x3D;True)def test_1():    print(&quot;执行测试用例1&quot;)def test_2():    print(&quot;执行测试用例2&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210630141608529.png" alt="image-20210630141608529"></p><h3 id="有条件的跳过某些用例"><a href="#有条件的跳过某些用例" class="headerlink" title="有条件的跳过某些用例"></a>有条件的跳过某些用例</h3><p>语法：@pytest.mark.skipif(condition, reason=””)</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skipif</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">'darwin'</span><span class="token punctuation">,</span> reason<span class="token operator">=</span><span class="token string">"does not run on MacOS"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestSkipIf</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_demo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不能在MacOS上运行"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>注意：</strong>condition需要返回True才会跳过</p><p>执行结果如下：</p><p><img src="https://img.rockche.cn//image-20210630142429456.png" alt="image-20210630142429456"></p><h3 id="跳过标记的使用"><a href="#跳过标记的使用" class="headerlink" title="跳过标记的使用"></a>跳过标记的使用</h3><ul><li>可以将 pytest.mark.skip 和 pytest.mark.skipif 赋值给一个标记变量</li><li>在不同模块之间共享这个标记变量</li><li>若有多个模块的测试用例需要用到相同的 skip 或 skipif ，可以用一个单独的文件去管理这些通用标记，然后适用于整个测试用例集</li></ul><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> pytestskipmark <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skip<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"不执行此用例"</span><span class="token punctuation">)</span>skipifmark <span class="token operator">=</span> pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>skipif<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">'darwin'</span><span class="token punctuation">,</span> reason<span class="token operator">=</span><span class="token string">"does not run on MacOS"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@skipifmark</span><span class="token keyword">class</span> <span class="token class-name">TestSkipIf</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_demo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不能在MacOS上运行"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@skipmark</span><span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下</p><p><img src="https://img.rockche.cn//image-20210630145126039.png" alt="image-20210630145126039"></p><h3 id="当缺少某些导入时跳过用例"><a href="#当缺少某些导入时跳过用例" class="headerlink" title="当缺少某些导入时跳过用例"></a>当缺少某些导入时跳过用例</h3><p>语法：</p><p><code>pytest.importorskip( modname: str, minversion: Optional[str] = None, reason: Optional[str] = None )</code></p><p>参数：</p><ul><li>modname： 需要被导入的模块名称，比如 selenium；</li><li>minversion： 表示需要导入的最小的版本号，如果该版本不达标，将会打印出报错信息；</li><li>reason： 只有当模块没有被导入时，给定该参数将会显示出给定的消息内容</li></ul><h4 id="找不到对应module"><a href="#找不到对应module" class="headerlink" title="找不到对应module"></a>找不到对应module</h4><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestrock <span class="token operator">=</span> pytest<span class="token punctuation">.</span>importorskip<span class="token punctuation">(</span><span class="token string">"rock"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@rock</span><span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试是否导入了rock模块"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果</p><p><img src="https://img.rockche.cn//image-20210630151602831.png" alt="image-20210630151602831"></p><h4 id="如果版本不达标"><a href="#如果版本不达标" class="headerlink" title="如果版本不达标"></a>如果版本不达标</h4><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytestsel <span class="token operator">=</span> pytest<span class="token punctuation">.</span>importorskip<span class="token punctuation">(</span><span class="token string">"selenium"</span><span class="token punctuation">,</span> minversion<span class="token operator">=</span><span class="token string">"3.150"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@sel</span><span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试是否导入了selenium模块"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果</p><p><img src="https://img.rockche.cn//image-20210630151755943.png" alt="image-20210630151755943"></p><h3 id="整理参考"><a href="#整理参考" class="headerlink" title="整理参考"></a>整理参考</h3><p><a href="https://www.cnblogs.com/poloyy/p/12666682.html">小菠萝的测试笔记</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest6-自定义标记mark</title>
    <link href="/2021/06/29/Pytest6-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E8%AE%B0mark/"/>
    <url>/2021/06/29/Pytest6-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E8%AE%B0mark/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在pytest中，我们可以使用mark进行用例的自定义标记，通过不同的标记实现不同的运行策略</p><p>比如我们可以标记哪些用例是生产环境执行的，哪些用例是测试环境执行的，在运行代码的时候指定对应的mark即可</p><span id="more"></span><h2 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h2><p>举个🌰</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_demo.py</span><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>production</span><span class="token keyword">def</span> <span class="token function">test_production</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"生产环境测试用例"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>dev</span><span class="token keyword">def</span> <span class="token function">test_dev1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试环境测试用例1"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>dev</span><span class="token keyword">def</span> <span class="token function">test_dev2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试环境测试用例2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">testnoMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有标记测试"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令<code>pytest -s -m dev test_demo.py</code>执行</p><p>结果如下</p><p><img src="https://img.rockche.cn//image-20210629224049942.png" alt="image-20210629224049942"></p><p>可以看到，只执行了两条标记了dev的用例</p><h3 id="处理warnings信息"><a href="#处理warnings信息" class="headerlink" title="处理warnings信息"></a>处理warnings信息</h3><ul><li><p>创建一个pytest.ini文件</p></li><li><p>然后在 pytest.ini 文件的 markers 中写入你的 mark 标记， 冒号 “:” 前面是标记名称，后面是 mark 标记的说明，可以是空字符串</p></li><li><p><strong>注意：</strong>pytest.ini需要和运行的测试用例同一个目录，或在根目录下作用于全局</p><p><img src="https://img.rockche.cn//image-20210629224639064.png" alt="image-20210629224639064"></p></li></ul><h3 id="规范使用mark标记"><a href="#规范使用mark标记" class="headerlink" title="规范使用mark标记"></a>规范使用mark标记</h3><p>添加了pytest.ini文件之后 pytest 便不会再告警，但是如果我们在运行用例的时候写错了 mark 名，会导致 pytest 找不到用例，所以我们需要在 pytest.ini 文件中添加参数 <code>“addopts = --strict-markers”</code>来严格规范 mark 标记的使用</p><p><img src="https://img.rockche.cn//image-20210629232426057.png" alt="image-20210629232426057"></p><p>添加该参数后，当使用未注册的 mark 标记时，pytest会直接报错：“ <code>&#39;xxx&#39; not found in markers configuration option</code> ”，不执行测试任务</p><p><img src="https://img.rockche.cn//image-20210629232320091.png" alt="image-20210629232320091"></p><h3 id="执行标记以外的用例"><a href="#执行标记以外的用例" class="headerlink" title="执行标记以外的用例"></a>执行标记以外的用例</h3><blockquote><p><code>pytest -s -m &quot;not dev&quot; test_demo.py</code></p></blockquote><p>结果如下</p><p><img src="https://img.rockche.cn//image-20210629225046830.png" alt="image-20210629225046830"></p><h3 id="执行多个自定义标记的用例"><a href="#执行多个自定义标记的用例" class="headerlink" title="执行多个自定义标记的用例"></a>执行多个自定义标记的用例</h3><blockquote><p><code>pytest -s -m &quot;dev or production&quot; test_demo.py</code></p></blockquote><p>结果如下</p><p><img src="https://img.rockche.cn//image-20210629225222295.png" alt="image-20210629225222295"></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest5-conftest.py的用法</title>
    <link href="/2021/06/26/Pytest5-conftest.py%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2021/06/26/Pytest5-conftest.py%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前介绍fixture的文章中，我们使用到了conftest.py文件，那么conftest.py文件到底该如何使用呢，下面我们就来详细了解一下conftest.py文件的特点和使用方法吧</p><h2 id="什么是conftest-py"><a href="#什么是conftest-py" class="headerlink" title="什么是conftest.py"></a>什么是conftest.py</h2><p>我们之前了解了fixture，fixture可以直接定义在测试脚本中，但是有些时候，我们希望一个fixture可以被复用，这就需要对fixture进行集中管理，Pytest使用文件<code>conftest.py</code>集中管理固件.在复杂的项目中,可以在不同的目录层级定义conftest.py,其作用域为其所在的目录和子目录，通常情况下，<code>conftest.py</code>和<code>@pytest.fixture()</code>会结合使用，来实现全局的前后置处理。</p><span id="more"></span><h2 id="conftest-py特点"><a href="#conftest-py特点" class="headerlink" title="conftest.py特点"></a>conftest.py特点</h2><ul><li><code>conftest.py</code>文件的名称是固定的，不能修改</li><li><code>conftest.py</code>与运行的用例要在同一个pakage下，并且有<code>__init__.py</code>文件</li><li>不需要<code>import</code>导入<code>conftest.py</code>文件，pytest用例会自动识别该文件，放到根目录下可以全局目录调用，放在某个package下，那就在该package内有效</li><li>不同目录可以有自己的conftest.py，一个项目中可以有多个<code>conftest.py</code></li><li>pytest会默认读取<code>conftest.py</code>里面的所有fixture，所有同目录测试文件运行前都会执行<code>conftest.py</code>文件</li></ul><h2 id="conftest-py用法"><a href="#conftest-py用法" class="headerlink" title="conftest.py用法"></a>conftest.py用法</h2><p>在我们实际的测试中，conftest.py文件需要结合fixture来使用，所以fixture中参数scope也适用conftest.py中fixture的特性，这里再说明一下</p><blockquote><ul><li>conftest中fixture的scope参数为session，所有的测试文件执行前（后）执行一次<code>conftest.py</code>文件中的fixture。</li><li>conftest中fixture的scope参数为module，每一个测试.py文件执行前（后）都会执行一次<code>conftest.py</code>文件中的fixture</li><li>conftest中fixture的scope参数为class，每一个测试文件中的测试类执行前（后）都会执行一次<code>conftest.py</code>文件中的fixture</li><li>conftest中fixture的scope参数为function，所有文件的测试用例执行前（后）都会执行一次<code>conftest.py</code>文件中的fixture</li></ul></blockquote><h2 id="conftest-py实际案例"><a href="#conftest-py实际案例" class="headerlink" title="conftest.py实际案例"></a>conftest.py实际案例</h2><p>我们按照这样的目录新建一个项目</p><p><img src="https://img.rockche.cn//image-20210627112906673.png" alt="image-20210627112906673"></p><h3 id="在根目录conftestdemo下"><a href="#在根目录conftestdemo下" class="headerlink" title="在根目录conftestdemo下"></a>在根目录conftestdemo下</h3><p>根目录中的conftest.py文件中，一般写全局的fixture，比如登录</p><p>conftest.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">"session"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"***登录成功，返回用户名***"</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token string">"rockche"</span>    <span class="token keyword">yield</span> name    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"***退出登录***"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> login    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"--每个用例都调用外层fixiture：打印用户name：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">--"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>根目录下的测试用例</p><p>test_1.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_get_name</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> login    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"***基础用例：获取用户name***"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"用户名:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行conftestdemo下的所有用例</p><p>run.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"-s"</span><span class="token punctuation">,</span> <span class="token string">"../conftestdemo/"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="test-baidu目录下"><a href="#test-baidu目录下" class="headerlink" title="test_baidu目录下"></a>test_baidu目录下</h3><p>配置针对baidu网站的测试用例独有的fixture</p><p>conftest.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">open_baidu</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> login    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"用户 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> 打开baidu"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>test_case1.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_case2_01</span><span class="token punctuation">(</span>open_baidu<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"搜索pytest"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_case2_02</span><span class="token punctuation">(</span>open_baidu<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"搜索博客园"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="test-cnblogs目录下"><a href="#test-cnblogs目录下" class="headerlink" title="test_cnblogs目录下"></a>test_cnblogs目录下</h3><p>没有<code>__init__.py</code>文件也没有conftest.py文件</p><p>test_case1.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_no_fixture</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有__init__文件，直接进入cnblogs"</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h3 id="test-taobao目录下"><a href="#test-taobao目录下" class="headerlink" title="test_taobao目录下"></a>test_taobao目录下</h3><p>配置针对taobao网站的测试用例独有的fixture</p><p>conftest.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">"function"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">open_taobao</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> login    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"用户 </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> 进入淘宝"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>test_case1.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestTaobao</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_case1_01</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> open_taobao<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选购商品"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_case1_02</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> open_taobao<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"进入结算界面"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="运行run-py"><a href="#运行run-py" class="headerlink" title="运行run.py"></a>运行run.py</h3><p><img src="https://img.rockche.cn//image-20210627115527210.png" alt="image-20210627115527210"></p><h2 id="整理参考"><a href="#整理参考" class="headerlink" title="整理参考"></a>整理参考</h2><p><a href="https://www.cnblogs.com/poloyy/p/12663601.html">小菠萝的测试笔记</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest4-assert断言</title>
    <link href="/2021/06/24/Pytest4-assert%E6%96%AD%E8%A8%80/"/>
    <url>/2021/06/24/Pytest4-assert%E6%96%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pytest作为单元测试框架，自然少不了断言功能，用过unittest的人都知道，在unittest中有丰富的断言方法，比如assertEqual()、assertIn()、assertTrue()、assertIs()等等，而在pytest中，并没有提供特殊的断言方法，而是直接使用python自带的关键字assert来进行断言操作。</p><p>下面我们就通过一些🌰来看看在pytest中是如何进行断言操作的吧</p><span id="more"></span><h2 id="常用断言"><a href="#常用断言" class="headerlink" title="常用断言"></a>常用断言</h2><p><code>Pytest</code>里的断言实际上就是Python中的assert断言方法,常用断言方法如下：</p><blockquote><ul><li>assert xx ：判断 xx 为真</li><li>assert not xx ：判断 xx 不为真</li><li>assert a in b ：判断 b 包含 a</li><li>assert a == b ：判断 a 等于 b</li><li>assert a != b ：判断 a 不等于 b</li></ul></blockquote><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">test_demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">assert</span> a<span class="token keyword">def</span> <span class="token function">test_demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">assert</span> <span class="token keyword">not</span> a<span class="token keyword">def</span> <span class="token function">test_demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">'hello'</span>    <span class="token keyword">assert</span> <span class="token string">'h'</span> <span class="token keyword">in</span> s<span class="token keyword">def</span> <span class="token function">test_demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">assert</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token keyword">def</span> <span class="token function">test_demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">assert</span> a <span class="token operator">!=</span> <span class="token number">3</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210624144052915.png" alt="image-20210624144052915"></p><p>如果想在异常的时候，能够输出一些提示信息，可在直接在断言后面加上提示信息，如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">test_demo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">assert</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"两者不相等"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果：</p><p><img src="https://img.rockche.cn//image-20210624151716763.png" alt="image-20210624151716763"></p><h2 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h2><p>在实际测试的过程中，我们经常需要对特定异常进行断言，可以使用 pytest.raises 作为上下文管理器，当抛出异常时可以获取到对应的异常实例</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">test_zero_division</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果：</p><p><img src="https://img.rockche.cn//image-20210624144815922.png" alt="image-20210624144815922"></p><p>可以看到，这里程序异常了，所以我们需要捕获并断言异常。</p><p><strong>断言场景</strong>：断言抛出的异常是否符合预期。</p><p><strong>预期结果</strong>：ZeroDivisionError: division by zero，其中ZeroDivisionError为错误类型，division by zero为具体错误值。</p><p><strong>断言方式</strong>:  断言异常的type和value值。</p><p><strong>断言代码如下</strong>：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">test_zero_division</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">)</span> <span class="token keyword">as</span> excinfo<span class="token punctuation">:</span>        <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span>    <span class="token comment"># 断言异常类型 type</span>    <span class="token keyword">assert</span> excinfo<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> ZeroDivisionError    <span class="token comment"># 断言异常 value 值</span>    <span class="token keyword">assert</span> <span class="token string">"division by zero"</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>excinfo<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>excinfo作为异常信息实例，拥有type 、value、.traceback等属性</p><p>excinfo.value的值是元组，所以要转成字符串</p><p>在上下文管理器的作用域中，raises代码必须是最后一行，否则，其后面的代码将不会执行</p></blockquote><h2 id="拓展：match"><a href="#拓展：match" class="headerlink" title="拓展：match"></a>拓展：match</h2><p>你也可以给<code>pytest.raises()</code>传递一个关键字参数<code>match</code>，来测试异常的字符串表示<code>str(excinfo.value)</code>是否符合给定的正则表达式（和<code>unittest</code>中的<code>TestCase.assertRaisesRegexp</code>方法类似）：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Exception 123 raised"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_match</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># pytest.raises()函数，</span>    <span class="token comment"># 可以用元组的形式传递参数，只需要触发其中任意一个即可。</span>    <span class="token comment"># 通过match可以设置通过正则表达式匹配异常。</span>    <span class="token keyword">with</span> pytest<span class="token punctuation">.</span>raises<span class="token punctuation">(</span><span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span> RuntimeError<span class="token punctuation">)</span><span class="token punctuation">,</span> match<span class="token operator">=</span><span class="token string">r'.* 123 .*'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> excinfo<span class="token punctuation">:</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> “<span class="token number">123</span>” <span class="token keyword">in</span> <span class="token builtin">str</span>（excinfo<span class="token punctuation">.</span>value）    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="拓展：检查断言装饰器"><a href="#拓展：检查断言装饰器" class="headerlink" title="拓展：检查断言装饰器"></a>拓展：检查断言装饰器</h2><p><code>pytest.mark.xfail()</code>也可以接收一个<code>raises</code>参数，来判断用例是否因为一个具体的异常而导致失败：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>xfail</span><span class="token punctuation">(</span>raises<span class="token operator">=</span>ZeroDivisionError<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>执行结果：</p><p><img src="https://img.rockche.cn//image-20210624160307993.png" alt="image-20210624160307993"></p><blockquote><p>如果<code>test_f()</code>触发的异常类型和raises指定的异常类型一致，则用例被标记为<code>xfailed</code></p><p>如果<code>test_f()</code>测试成功，用例的结果是<code>xpassed</code>，而不是<code>passed</code></p><p><code>pytest.raises</code>适用于检查由代码故意引发的异常；而<code>@pytest.mark.xfail()</code>更适合用于记录一些未修复的 Bug</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/luizyao/pytest-chinese-doc/tree/6.1.1">pytest-chinese-doc</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest3-fixture</title>
    <link href="/2021/06/22/Pytest3-fixture/"/>
    <url>/2021/06/22/Pytest3-fixture/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>个人认为，fixture是pytest最精髓的地方，也是学习pytest必会的知识点。</p><h1 id="fixture用途"><a href="#fixture用途" class="headerlink" title="fixture用途"></a>fixture用途</h1><ul><li>用于执行测试前后的初始化操作，比如打开浏览器、准备测试数据、清除之前的测试数据等等</li><li>用于测试用例的前置条件，比如UI自动化的登录操作，读取config参数等</li><li>用于测试用例之间的参数和数据传递</li></ul><h1 id="fixture优势"><a href="#fixture优势" class="headerlink" title="fixture优势"></a>fixture优势</h1><p>firture相对于<code>unittest</code>中的setup和teardown来说应该有以下几点优势</p><ul><li>命名方式更加的灵活，不局限于setup和teardown</li><li>conftest.py 配置里可以实现数据共享，不需要import就能自动找到一些配置</li><li>scope=”module” 可以实现多个.py跨文件共享前置, 每一个.py文件调用一次</li><li>scope=”session” 以实现多个.py跨文件使用一个session来完成多个用例</li></ul><h1 id="fixture语法"><a href="#fixture语法" class="headerlink" title="fixture语法"></a>fixture语法</h1><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">fixture<span class="token punctuation">(</span>callable_or_scope<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> scope<span class="token operator">=</span><span class="token string">"function"</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> autouse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> ids<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><ul><li><p>scope：fixture的作用域，默认为function</p></li><li><p>autouse：默认为False，表示需要用例手动调用该fixture；当为True时，表示所有作用域内的测试用例都会自动调用该fixture</p></li><li><p>name：装饰器的名称，同一模块的fixture相互调用建议使用不同的name</p><span id="more"></span></li></ul><h1 id="fixture定义"><a href="#fixture定义" class="headerlink" title="fixture定义"></a>fixture定义</h1><p>fixture通过<code>@pytest.fixture()</code>装饰器装饰一个函数，这个函数就是一个fixture，实例如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_fixture.py</span><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"一个fixture"</span><span class="token keyword">def</span> <span class="token function">test_fixture</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例执行时调用了&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pytest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'-v'</span><span class="token punctuation">,</span> <span class="token string">'test_fixture.py'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下：</p><p><img src="https://img.rockche.cn//image-20210622175407924.png" alt="image-20210622175407924"></p><h1 id="fixture调用"><a href="#fixture调用" class="headerlink" title="fixture调用"></a>fixture调用</h1><p>调用fixture有三种方式</p><ul><li>fixture名字作为用例函数的参数</li><li>使用@pytest.mark.usefixtures(‘fixture名称’)装饰器</li><li>使用autouse参数</li></ul><h2 id="fixture名字作为用例函数的参数"><a href="#fixture名字作为用例函数的参数" class="headerlink" title="fixture名字作为用例函数的参数"></a>fixture名字作为用例函数的参数</h2><p>将fixture名称作为参数传入测试用例，如果fixture有返回值，那么测试用例将会接收返回值</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'打开浏览器'</span><span class="token keyword">def</span> <span class="token function">test_fixture</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例的时候，先&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestFixture</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_fixture_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在类中执行测试用例的时候，先 "&#123;&#125;"'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下：</p><p><img src="https://img.rockche.cn//image-20210622180857595.png" alt="image-20210622180857595"></p><h2 id="使用-pytest-mark-usefixtures-‘fixture名称’-装饰器"><a href="#使用-pytest-mark-usefixtures-‘fixture名称’-装饰器" class="headerlink" title="使用@pytest.mark.usefixtures(‘fixture名称’)装饰器"></a>使用@pytest.mark.usefixtures(‘fixture名称’)装饰器</h2><p>每个函数或者类前使用@pytest.mark.usefixtures(‘fixture名称’)装饰器装饰</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行fixture'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fixtureDemo'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fixtureDemo'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestFixture</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_fixture_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在类中执行测试用例'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下：</p><p><img src="https://img.rockche.cn//image-20210622220259171.png" alt="image-20210622220259171"></p><h2 id="使用autouse参数"><a href="#使用autouse参数" class="headerlink" title="使用autouse参数"></a>使用autouse参数</h2><p>指定fixture的参数autouse=True，这样同一作用域的每个测试用例会自动调用fixture，autouse为False时，需要手动调用fixture</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行fixture'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestFixture</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_fixture_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在类中执行测试用例'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下：</p><p><img src="https://img.rockche.cn//image-20210622220821598.png" alt="image-20210622220821598"></p><h2 id="三种方式的区别"><a href="#三种方式的区别" class="headerlink" title="三种方式的区别"></a>三种方式的区别</h2><p>以上便是fixture的三种调用方式，那么这三种方式有何不同呢，观察🌰，可以看出：</p><p>如果在测试用例中需要使用到fixture中返回的参数，就只能使用第一种调用方式了，因为fixture中返回的数据是默认在fixture名字中存储的。</p><h1 id="fixture作用范围"><a href="#fixture作用范围" class="headerlink" title="fixture作用范围"></a>fixture作用范围</h1><p>fixture参数中的<code>scope</code>参数可以控制fixture的作用范围，scope参数可以是session， module，class，function， 默认为function</p><ul><li>session 会话级别：是多个文件调用一次，可以跨.py文件调用，每个.py文件就是module（通常配合conftest.py文件使用）；</li><li>module 模块级别：模块里所有的用例执行前执行一次module级别的fixture；</li><li>class 类级别 ：每个类执行前都会执行一次class级别的fixture；</li><li>function  函数级别：每个测试用例执行前都会执行一次function级别的fixture（前面的🌰）</li></ul><p><strong>说明：当 fixture 有返回值时，pytest 会把返回值缓存起来，如果 fixture 在指定的作用域内被多次调用，只有第一次调用会真正的被执行，后续调用会使用被缓存起来的返回值，而不是再执行一遍；</strong></p><p>下面我们通过实例来对fixture的作用范围进行了解</p><h2 id="function级别"><a href="#function级别" class="headerlink" title="function级别"></a>function级别</h2><p>每个测试用例之前运行一次</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"fixture"</span><span class="token keyword">def</span> <span class="token function">test_01</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例1执行时调用了&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试用例2执行时调用了&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210623000220362.png" alt="image-20210623000220362"></p><h2 id="class级别"><a href="#class级别" class="headerlink" title="class级别"></a>class级别</h2><p>如果一个class里面有多个用例，都调用了此fixture，那么fixture只在此class里所有用例开始前执行一次</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行fixture'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fixtureDemo'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestFixture</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_01</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在类中执行测试用例1'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在类中执行测试用例2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210623001002710.png" alt="image-20210623001002710"></p><h2 id="module级别"><a href="#module级别" class="headerlink" title="module级别"></a>module级别</h2><p>在当前.py脚本里面所有用例开始前只执行一次</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行fixture'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fixtureDemo'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fixtureDemo'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestFixture</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在类中执行测试用例2'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_03</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'在类中执行测试用例3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210623003645546.png" alt="image-20210623003645546"></p><h2 id="session级别"><a href="#session级别" class="headerlink" title="session级别"></a>session级别</h2><p>session级别是可以跨模块调用的，如果多个模块下的用例只需调用一次fixture，可以设置scope=”session”，并且写到conftest.py文件里。</p><p>conftest.py作用域：放到项目的根目录下就可以全局调用了，如果放到某个package下，那就在该package内有效。</p><p>conftest.py的fixture调用方式，无需导入，直接使用</p><p>举个🌰：</p><p>先新建一个conftest.py文件</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixturedemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行fixture"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>test_01.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_01</span><span class="token punctuation">(</span>fixturedemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>test_02.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span>fixturedemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>在当前目录中使用命令 <code>pytest -v -s</code> 执行，结果如下：</p><p><img src="https://img.rockche.cn//image-20210623143540941.png" alt="image-20210623143540941"></p><p>可以看到，在执行不同模块中的测试用例前，都调用了fixture</p><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><p>看完有点懵？我们再用一个🌰来看看</p><p>在3个测试方法中同时调用4个级别的fixture来看看效果</p><p>先新建一个conftest.py文件</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token comment"># 作用域 function</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">'function'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fix_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'方法级：fix_func'</span><span class="token punctuation">)</span><span class="token comment"># 作用域 class</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fix_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类级：fix_class'</span><span class="token punctuation">)</span><span class="token comment"># 作用域 module</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">'module'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fix_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'模块级：fix_module'</span><span class="token punctuation">)</span><span class="token comment"># 作用域 session</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">'session'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fix_session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'会话级：fix_session'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>test_demo.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">class</span> <span class="token class-name">TestClass_1</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""测试类1"""</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_func'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_class'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_module'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_session'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_func_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""测试方法1"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试方法1"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_func'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_class'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_module'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_session'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_func_2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""测试方法2"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试方法2"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestClass_2</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""测试类2"""</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_func'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_class'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_module'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>usefixtures</span><span class="token punctuation">(</span><span class="token string">'fix_session'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_func_3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""测试方法3"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试方法3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下：</p><p><img src="https://img.rockche.cn//image-20210623153946395.png" alt="image-20210623153946395"></p><p>观察运行结果，我们可以发现：</p><blockquote><ul><li><p>test_func_1 的调用全部被执行了；</p></li><li><p>test_func_2 的调用只有 function 级的被执行，因为 test_func_2 和 test_func_1 同属于同一个 session、module、class，所以这三个都不执行，只有 function 执行；</p></li><li><p>test_func_3 的调用执行了类级和方法级，因为 test_func_3 属于 另外一个类，所以 class 级会被再次调用</p></li></ul></blockquote><h1 id="fixture关键字yield"><a href="#fixture关键字yield" class="headerlink" title="fixture关键字yield"></a>fixture关键字yield</h1><p>前面讲的是在用例前加前置条件，相当于setup,那么类似teardown的功能如何使用fixture实现呢，我们可以使用yield关键字</p><p>yield关键字的作用其实和函数中的return关键字差不多，可以返回数据给调用者，唯一的不同是当函数执行遇到yield时，会停止执行，然后执行调用处的函数，调用的函数执行完后会继续执行yield关键后面的代码</p><h2 id="yield实现teardown"><a href="#yield实现teardown" class="headerlink" title="yield实现teardown"></a>yield实现teardown</h2><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行fixture'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行teardown操作'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_01</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210623151242016.png" alt="image-20210623151242016"></p><h2 id="yield遇到异常"><a href="#yield遇到异常" class="headerlink" title="yield遇到异常"></a>yield遇到异常</h2><p>如果多个用例运行时，有一个用例出现异常，不会影响yield后面的代码执行 , 运行结果互不影响，当全部用例执行完之后，yield后面的代码会正常执行</p><p>举个🌰：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fixtureDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行fixture'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行teardown操作'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_01</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例1'</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> NameError <span class="token comment"># 模拟异常</span><span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span>fixtureDemo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行测试用例2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210623151912711.png" alt="image-20210623151912711"></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest2-setup和teardown</title>
    <link href="/2021/06/21/Pytest2-setup%E5%92%8Cteardown/"/>
    <url>/2021/06/21/Pytest2-setup%E5%92%8Cteardown/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在做自动化的时候，常常有这样的需求：</p><ul><li><p>执行每一条用例时，都重新启动一次浏览器</p></li><li><p>每一条用例执行结束时，都清除测试数据</p></li></ul><p>在unittest中，我们可以使用 setUp() 和 tearDown() 两个方法来实现以上需求，其中 setUp() 方法用于初始化测试固件；而 tearDown() 方法用于销毁测试固件。程序会在运行每个测试用例（以 test_ 开头的方法）之前自动执行 setUp() 方法来初始化测试固件，井在每个测试用例（以 test_ 开头的方法）运行完成之后自动执行 tearDown() 方法来销毁测试固件。</p><p>那么如何实现只启动一次浏览器，所有测试用例执行结束后再清除数据这样的需求呢？</p><ul><li>unittest提供了setUpClass()和tearDownClass()两个方法，配合@classmethod装饰器使用即可</li></ul><p>作为比unittest更强大的框架，pytest自然也有类似的方法</p><span id="more"></span><p>pytest的setup/teardown方法包括：</p><ul><li>模块级别(setup_module/teardown_module)</li><li>函数级别(setup_function/teardown_function)</li><li>类级别(setup_class/ teardown_class)</li><li>方法级别(setup_method/teardown_methond或者setup/teardown)</li></ul><h1 id="模块级别"><a href="#模块级别" class="headerlink" title="模块级别"></a>模块级别</h1><p>模块中的第一个用例开始前执行一次setup_module方法，模块中的最后一个测试用例结束后执行一次teardown_module方法</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">setup_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行setup_module"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">teardown_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行teardown_module"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">test_case2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例2"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span>    <span class="token keyword">def</span> <span class="token function">test_case3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例3"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210621231421826.png" alt="image-20210621231421826"></p><h1 id="函数级别"><a href="#函数级别" class="headerlink" title="函数级别"></a>函数级别</h1><p>在每个测试函数前运行一次setup_function方法，在每个测试函数结束后运行一次teardown_function方法，只对函数用例生效，不在类中。</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">setup_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行setup_function"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">teardown_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行teardown_function"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">test_case2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例2"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token keyword">def</span> <span class="token function">test_case3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例3"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210621231355291.png" alt="image-20210621231355291"></p><h1 id="类级别"><a href="#类级别" class="headerlink" title="类级别"></a>类级别</h1><p>setup_class/teardown_class 对类有效，位于类中，在执行测试类之前和之后各调用一次</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">class</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行setup_class"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">teardown_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行teardown_class"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">test_case2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例2"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span>    <span class="token keyword">def</span> <span class="token function">test_case3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例3"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210621231310442.png" alt="image-20210621231310442"></p><h1 id="方法级别"><a href="#方法级别" class="headerlink" title="方法级别"></a>方法级别</h1><p>setup_method/teardown_method和setup/teardown，在测试类中每个测试方法前后调用一次。这两个方法效果是一样的</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">class</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行setup_method"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">teardown_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行teardown_method"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">test_case2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例2"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span>    <span class="token keyword">def</span> <span class="token function">test_case3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用3"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210621231121966.png" alt="image-20210621231121966"></p><h1 id="四种级别混合使用"><a href="#四种级别混合使用" class="headerlink" title="四种级别混合使用"></a>四种级别混合使用</h1><p>如果把这四种级别的方法混合使用，运行顺序如何呢？</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pytest<span class="token keyword">def</span> <span class="token function">setup_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模块开始时，执行setup_module"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">teardown_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模块结束时，执行teardown_module"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">setup_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数用例开始时，执行setup_function"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">teardown_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数用例结束时，执行teardown_function"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试函数a"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test_b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试函数b"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestDemo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试类开始时，执行setup_class"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">teardown_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试类结束时，执行teardown_class"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setup_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"类中的方法开始时，执行setup_method"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">teardown_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"类中的方法结束时，执行teardown_method"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_case1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例1"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">test_case2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例2"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span>    <span class="token keyword">def</span> <span class="token function">test_case3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行测试用例3"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>运行结果如下：</p><p><img src="https://img.rockche.cn//image-20210621233905952.png" alt="image-20210621233905952"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>模块级（setup_module/teardown_module）开始于模块始末，全局的</li><li>函数级（setup_function/teardown_function）只对函数用例生效（不在类中）</li><li>类级（setup_class/teardown_class）只在类中前后运行一次(在类中)</li><li>方法级（setup_method/teardown_method或setup/teardown）开始于方法始末（在类中）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest1-快速入门</title>
    <link href="/2021/06/16/Pytest1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2021/06/16/Pytest1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytest特点"><a href="#Pytest特点" class="headerlink" title="Pytest特点"></a>Pytest特点</h1><p>Pytest是Python的一个第三方单元测试库。它的目的是让单元测试变得更容易，并且也能扩展到支持应用层面复杂的功能测试。</p><p>Pytest的特点有：</p><ul><li>入门简单，易上手，文档丰富</li><li>支持用简单的assert语句实现丰富的断言，无需复杂的self.assert*函数</li><li>支持参数化</li><li>自动识别测试模块和测试函数</li><li>执行测试过程中可以将某些测试跳过（skip），或者对某些预期失败的case标记成失败</li><li>支持重复执行(rerun)失败的 case</li><li>模块化夹具用以管理各类测试资源</li><li>对 unittest 完全兼容</li><li>可以很好的和jenkins集成</li><li>丰富的插件生态，有各式各样的插件，社区繁荣<span id="more"></span></li></ul><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="安装pytest"><a href="#安装pytest" class="headerlink" title="安装pytest"></a>安装pytest</h2><p>使用 pip 进行安装：</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> pytest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>安装之后查看版本：</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pytest --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-创建测试函数"><a href="#1-创建测试函数" class="headerlink" title="1.创建测试函数"></a>1.创建测试函数</h3><p>Pytest 使用 Python 的 <code>assert</code> 进行条件判断，最简单的测试函数如：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># testdemo.py</span><span class="token keyword">def</span> <span class="token function">test_passing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="2-运行测试函数"><a href="#2-运行测试函数" class="headerlink" title="2.运行测试函数"></a>2.运行测试函数</h3><p>在当前文件目录使用命令<code>pytest</code>运行测试函数：</p><p><img src="https://img.rockche.cn/mweb/image-20210616223825437.png" alt="image-20210616223825437"></p><h3 id="3-pytest运行规则"><a href="#3-pytest运行规则" class="headerlink" title="3.pytest运行规则"></a>3.pytest运行规则</h3><p>pytest会查找当前目录及其子目录下以<code>test_</code>开头的文件或以<code>_test</code>结尾的文件，找到文件后，执行文件中以test开头的 函数</p><h3 id="4-创建测试类"><a href="#4-创建测试类" class="headerlink" title="4.创建测试类"></a>4.创建测试类</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_class.py</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">test_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"h"</span> <span class="token keyword">in</span> x  <span class="token keyword">def</span> <span class="token function">test_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"a"</span> <span class="token keyword">in</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在当前文件目录使用命令<code>pytest</code>运行测试：</p><p><img src="https://img.rockche.cn/mweb/image-20210617002840628.png" alt="image-20210617002840628"></p><p>第一次测试通过，第二次测试失败。 可以在断言中查看失败的原因</p><h2 id="Pytest执行用例命令行参数"><a href="#Pytest执行用例命令行参数" class="headerlink" title="Pytest执行用例命令行参数"></a>Pytest执行用例命令行参数</h2><p>除了<code>pytest</code>命令，pytest还提供了很多执行用例的命令行参数，如下：</p><h3 id="1-v"><a href="#1-v" class="headerlink" title="1.-v"></a>1.-v</h3><p>输出用例更加详细的执行信息，比如用例所在的文件及用例名称等</p><p><img src="https://img.rockche.cn/mweb/image-20210617141445528.png" alt="image-20210617141445528"></p><h3 id="2-s"><a href="#2-s" class="headerlink" title="2.-s"></a>2.-s</h3><p>输出用例中的调式信息，比如print的打印信息等，我们在之前的test_class.py第3行加上一句 <code>print(“测试调试信息”)</code></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_class.py</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">test_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试调试信息"</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"h"</span> <span class="token keyword">in</span> x  <span class="token keyword">def</span> <span class="token function">test_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"a"</span> <span class="token keyword">in</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>   再执行一次用例看看</p><p>   <img src="https://img.rockche.cn/mweb/image-20210617141824233.png" alt="image-20210617141824233"></p><h3 id="3-m"><a href="#3-m" class="headerlink" title="3.-m"></a>3.-m</h3><p>执行被标记的测试用例</p><p>我们修改test_class.py文件如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_class.py</span><span class="token keyword">import</span> pytest<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">test_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试调试信息"</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"h"</span> <span class="token keyword">in</span> x      <span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>run_this_case</span>  <span class="token keyword">def</span> <span class="token function">test_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"a"</span> <span class="token keyword">in</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令 <code>pytest -m run_this_case  test_calss.py</code>执行</p><p><img src="https://img.rockche.cn/mweb/image-20210617144012907.png" alt="image-20210617144012907"></p><p>可以看到只执行了被标记的用例</p><h3 id="4-k"><a href="#4-k" class="headerlink" title="4.-k"></a>4.-k</h3><p>执行用例包含“关键字”的用例</p><p>我们修改test_class.py文件如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_class.py</span><span class="token keyword">import</span> pytest<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">test_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试调试信息"</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"h"</span> <span class="token keyword">in</span> x      <span class="token keyword">def</span> <span class="token function">test_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"a"</span> <span class="token keyword">in</span> x      <span class="token keyword">def</span> <span class="token function">test_rock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"rock"</span>    <span class="token keyword">assert</span> <span class="token string">"o"</span> <span class="token keyword">in</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令 <code>pytest -k &quot;rock&quot; test_class.py</code>执行</p><p><img src="https://img.rockche.cn/mweb/image-20210617144500945.png" alt="image-20210617144500945"></p><h3 id="5-q"><a href="#5-q" class="headerlink" title="5.-q"></a>5.-q</h3><p>简化控制台的输出，可以看到输出信息和上面的结果都不一样， 下图中有三个.代替了pass结果</p><p><img src="https://img.rockche.cn/mweb/image-20210617145043766.png" alt="image-20210617145043766"></p><h3 id="6-–collect-only"><a href="#6-–collect-only" class="headerlink" title="6.–collect-only"></a>6.–collect-only</h3><p>罗列出所有当前目录下所有的测试模块，测试类及测试函数</p><p><img src="https://img.rockche.cn/mweb/image-20210617145514237.png" alt="image-20210617145514237"></p><h3 id="7-–tb-style"><a href="#7-–tb-style" class="headerlink" title="7.–tb=style"></a>7.–tb=style</h3><p>执行用例的时候，有些用例执行失败的时候，屏幕上会出现一大堆的报错内容，不方便快速查看是哪些用例失败，<code>--tb=style</code>可以屏蔽测试用例执行输出的回溯信息，可以简化用例失败时的输出信息, style的选项有[‘auto’, ‘long’, ‘short’, ‘no’, ‘line’, ‘native’], 具体区别如下：</p><p>–tb=auto 有多个用例失败的时候，只打印第一个和最后一个用例的回溯信息<br>–tb=long 输出最详细的回溯信息<br>–tb=short 输入assert的一行和系统判断内容<br>–tb=line 使用一行显示错误信息<br>–tb=native 只输出python标准库的回溯信息<br>–tb=no 不显示回溯信息</p><h3 id="8-–lf和–ff"><a href="#8-–lf和–ff" class="headerlink" title="8.–lf和–ff"></a>8.–lf和–ff</h3><p>–last-failed 只重新运行上次运行失败的用例（或如果没有失败的话会全部跑）</p><p>–failed-first 运行所有测试，但首先运行上次运行失败的测试（这可能会重新测试，从而导致重复的fixture setup/teardown）</p><p>我们修改test_class.py文件如下：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_class.py</span><span class="token keyword">import</span> pytest<span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">test_a</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试调试信息"</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"h"</span> <span class="token keyword">in</span> x      <span class="token keyword">def</span> <span class="token function">test_b</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">assert</span> <span class="token string">"a"</span> <span class="token keyword">in</span> x      <span class="token keyword">def</span> <span class="token function">test_rock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"rock"</span>    <span class="token keyword">assert</span> <span class="token string">"o"</span> <span class="token keyword">in</span> x      <span class="token keyword">def</span> <span class="token function">test_c</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"world"</span>    <span class="token keyword">assert</span> <span class="token string">"q"</span> <span class="token keyword">in</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>使用命令<code>pytest</code>执行全部用例，结果如下：</p><p><img src="https://img.rockche.cn/mweb/image-20210617151647993.png" alt="image-20210617151647993"></p><p>可以看到执行了4条用例，失败了2条</p><p>然后使用命令<code>pytest --lf</code>，执行失败的用例，结果如下：</p><p><img src="https://img.rockche.cn/mweb/image-20210617151841294.png" alt="image-20210617151841294"></p><p>可以看到只执行了两条失败的用例</p><p>最后我们使用命令<code>pytest --ff</code>，先执行失败的用例，再执行成功的用例，结果如下：</p><p><img src="https://img.rockche.cn/mweb/image-20210617152006219.png" alt="image-20210617152006219"></p><p>可以看到先执行了2条失败的用例，然后执行了2条成功的用例</p><h3 id="9-x"><a href="#9-x" class="headerlink" title="9.-x"></a>9.-x</h3><p>遇到错误时停止测试</p><p><img src="https://img.rockche.cn//image-20210619154608871.png" alt="image-20210619154608871"></p><p>可以看到，本来有4条用例，但是在第2条用例失败后，就没有继续往下执行了</p><h3 id="10-–maxfail-num"><a href="#10-–maxfail-num" class="headerlink" title="10.–maxfail=num"></a>10.–maxfail=num</h3><p>当用例错误个数达到指定数量时，停止测试</p><p>我们执行命令 <code>pytest --maxfail=1</code> </p><p><img src="https://img.rockche.cn//image-20210619155039322.png" alt="image-20210619155039322"></p><p>可以看到，本来有4条用例，但是在第2条用例失败后，就没有继续往下执行了</p><p>以上就是命令行运行测试用例时经常使用到的参数，这些参数不仅可以单独使用，也可以组合一起使用，可以使用<code>--help</code>来查看更多命令的帮助信息</p><h2 id="Pytest收集用例规则"><a href="#Pytest收集用例规则" class="headerlink" title="Pytest收集用例规则"></a>Pytest收集用例规则</h2><ul><li>从一个或者多个目录开始查找，你可以在命令行指定文件或者目录，如果未指定那么从当前目录开始收集用例</li><li>在该目录和所有子目录下递归查找测试模块</li><li>测试模块是指文件名为test_*.py或者*_test.py的文件</li><li>在测试模块中查找以test_开头的函数</li><li>查找名字以Test开头的类。其中首先筛选掉包含__init__()函数的类，再查找类中以Test_开头的类方法</li></ul><h3 id="规则验证"><a href="#规则验证" class="headerlink" title="规则验证"></a>规则验证</h3><p>我们按照以下目录结构新建一个项目</p><p><img src="https://img.rockche.cn/mweb/image-20210617155429499.png" alt="image-20210617155429499"></p><p>代码如下：</p><p>case01.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># case01.py</span><span class="token comment"># 测试函数</span><span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>test_01.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># test_01.py</span><span class="token comment"># 测试函数</span><span class="token keyword">def</span> <span class="token function">test_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通函数</span><span class="token keyword">def</span> <span class="token function">func_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是一个普通函数"</span><span class="token punctuation">)</span><span class="token comment"># 测试类</span><span class="token keyword">class</span> <span class="token class-name">TestClass_01</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 测试函数</span>    <span class="token keyword">def</span> <span class="token function">test_class_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>    <span class="token comment"># 普通函数</span>    <span class="token keyword">def</span> <span class="token function">func_class_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通类</span><span class="token keyword">class</span> <span class="token class-name">NoTestClass_02</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 测试函数</span>    <span class="token keyword">def</span> <span class="token function">test_class_2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>    <span class="token comment"># 普通函数</span>    <span class="token keyword">def</span> <span class="token function">func_class_2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>case.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试函数</span><span class="token keyword">def</span> <span class="token function">test_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通函数</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在项目根目录下执行<code>pytest --collect-only</code>,结果如下：</p><p><img src="https://img.rockche.cn/mweb/image-20210617160120440.png" alt="image-20210617160120440"></p><p>可以看到，只有2条有效的测试用例</p><p>使用<code>pytest -v</code>命令执行用例，结果如下：</p><p><img src="https://img.rockche.cn/mweb/image-20210617160637211.png" alt="image-20210617160637211"></p><p>可以看到，只有test_01.py被识别为测试模块</p><h2 id="pytest执行用例规则"><a href="#pytest执行用例规则" class="headerlink" title="pytest执行用例规则"></a>pytest执行用例规则</h2><h3 id="规则验证-1"><a href="#规则验证-1" class="headerlink" title="规则验证"></a>规则验证</h3><p>按照如下目录结构新建项目</p><p><img src="https://img.rockche.cn//image-20210619151855179.png" alt="image-20210619151855179"></p><p>代码如下：</p><p>test_01.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试函数</span><span class="token keyword">def</span> <span class="token function">test_func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通函数</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>test_02.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试类</span><span class="token keyword">class</span> <span class="token class-name">TestClass1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 测试函数</span>    <span class="token keyword">def</span> <span class="token function">test_func2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>    <span class="token comment"># 普通函数</span>    <span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>case01.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试函数</span><span class="token keyword">def</span> <span class="token function">test_func5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通函数</span><span class="token keyword">def</span> <span class="token function">func5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>test_03.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试类</span><span class="token keyword">class</span> <span class="token class-name">TestClass2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 测试函数</span>    <span class="token keyword">def</span> <span class="token function">test_func3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>    <span class="token comment"># 普通函数</span>    <span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 测试函数</span><span class="token keyword">def</span> <span class="token function">test_func4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通函数</span><span class="token keyword">def</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>case_02.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试方法</span><span class="token keyword">def</span> <span class="token function">test_func8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通方法</span><span class="token keyword">def</span> <span class="token function">func8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>04_test.py</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试方法</span><span class="token keyword">def</span> <span class="token function">test_func6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 普通方法</span><span class="token keyword">def</span> <span class="token function">func6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token comment"># 测试类</span><span class="token keyword">class</span> <span class="token class-name">TestClass</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 测试方法</span>    <span class="token keyword">def</span> <span class="token function">test_func7</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span>    <span class="token comment"># 普通方法</span>    <span class="token keyword">def</span> <span class="token function">func7</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>在项目根目录下执行<code>pytest -v</code>,结果如下：</p><p><img src="https://img.rockche.cn//image-20210619151727755.png" alt="image-20210619151727755"></p><p>可以看到一共有执行了6条用例，但是我们实际上写了不止6条用例，通过观察，会发现这样一个规律：</p><p><em>Pytest会从我们当前的目录开始遍历查找所有目录，查找以test_开头或_test结尾的文件，在这些文件中找到以test开头的函数和以Test开头的类和类里面以test开头的函数做为测试用例</em></p><h2 id="Pytest运行指定测试用例"><a href="#Pytest运行指定测试用例" class="headerlink" title="Pytest运行指定测试用例"></a>Pytest运行指定测试用例</h2><h3 id="运行指定目录下的所有用例"><a href="#运行指定目录下的所有用例" class="headerlink" title="运行指定目录下的所有用例"></a>运行指定目录下的所有用例</h3><p>使用命令 <code>pytest -v Case01</code>运行 Case01目录下的用例, 结果如下</p><p><img src="https://img.rockche.cn//image-20210619152748193.png" alt="image-20210619152748193"></p><h3 id="运行指定文件中的所有用例"><a href="#运行指定文件中的所有用例" class="headerlink" title="运行指定文件中的所有用例"></a>运行指定文件中的所有用例</h3><p>使用命令 <code>pytest -v Case01/test_01.py </code>运行Case01中的test_01.py文件中的测试用例，结果如下</p><p><img src="https://img.rockche.cn//image-20210619152959577.png" alt="image-20210619152959577"></p><h3 id="运行指定文件中的测试类"><a href="#运行指定文件中的测试类" class="headerlink" title="运行指定文件中的测试类"></a>运行指定文件中的测试类</h3><p>使用命令 <code>pytest -v Case02/test_03.py::TestClass2 </code>运行Case02中的test_03.py文件中的测试类Testclass2，结果如下</p><p><img src="https://img.rockche.cn//image-20210619153221417.png" alt="image-20210619153221417"></p><h3 id="运行指定的测试用例函数"><a href="#运行指定的测试用例函数" class="headerlink" title="运行指定的测试用例函数"></a>运行指定的测试用例函数</h3><p>使用命令 <code>pytest -v Case02/test_03.py::test_func4</code>运行Case02中的test_03.py文件中的test_func4函数，结果如下</p><p><img src="https://img.rockche.cn//image-20210619153522347.png" alt="image-20210619153522347"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="收集用例规则"><a href="#收集用例规则" class="headerlink" title="收集用例规则"></a>收集用例规则</h3><p>搜索所有以test_开头的测试文件，以Test开头的测试类，以test_开头的测试函数</p><h3 id="执行用例规则"><a href="#执行用例规则" class="headerlink" title="执行用例规则"></a>执行用例规则</h3><ul><li><p>运行指定的目录下用例</p><ul><li> 使用命令 <code>pytest 目录/目录</code></li></ul></li><li><p>运行指定文件</p><ul><li>使用命令  <code>pytest 目录/文件</code></li></ul></li><li><p>运行指定类或者函数 </p><ul><li>使用命令  <code>pytest 目录/文件::类名::函数名 或者 pytest 目录/文件::函数名</code></li></ul></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/linuxchao/">linux超</a></p><p><a href="https://www.cnblogs.com/yoyoketang">上海悠悠</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pipenv虚拟环境</title>
    <link href="/2021/05/12/Pipenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/05/12/Pipenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Pipenv"><a href="#什么是Pipenv" class="headerlink" title="什么是Pipenv"></a>什么是Pipenv</h1><p>Pipenv是python官方推荐的虚拟环境管理工具，可以把它当作是virtualenv，pip，pyenv三者的集合工具，类似于npm和composer。<br>它能够自动为项目创建和管理虚拟环境，从 Pipfile 文件中添加或者删除包，同时生成 Pipfile.lock 文件来锁定安装包的版本和依赖信息，避免构建错误。</p><p>pipenv 主要解决了以下问题：</p><ul><li>不用再单独使用 virtualenv、pyenv 和 pip 了，现在它们结合到了一起。</li><li>不用再维护 requirement.txt 了，使用 Pipfile 和 Pipfile.lock 来代替。</li><li>可以在开发环境使用多个 python 版本。</li><li>在安装的 pyenv 条件下，可以自动安装需要的 python 版本。</li><li>安全，广泛地使用 Hash 校验，能够自动曝露安全漏洞。</li><li>随时查看图形化的依赖关系。</li><li>可通过自动加载 .env 读取环境变量，简化开发流程。<span id="more"></span></li></ul><h1 id="安装-pipenv"><a href="#安装-pipenv" class="headerlink" title="安装 pipenv"></a>安装 pipenv</h1><h2 id="MacOS下使用pip安装"><a href="#MacOS下使用pip安装" class="headerlink" title="MacOS下使用pip安装"></a>MacOS下使用pip安装</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ pip <span class="token function">install</span> --user pipenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>这个命令在用户级别（非系统全局）下安装 pipenv。如果安装后 shell 提示找不到 pipenv 命令，你需要添加当前 Python 用户主目录的 bin 目录到 PATH 环境变量。如果你不知道 Python 用户主目录在哪里，用下面的命令来查看：</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python -m site --user-base<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>输出如下<br><img src="https://img.rockche.cn/mweb/16216670258674.jpg"></p><h2 id="MacOS下使用brew安装"><a href="#MacOS下使用brew安装" class="headerlink" title="MacOS下使用brew安装"></a>MacOS下使用brew安装</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ brew <span class="token function">install</span> pipenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h1 id="Pipenv常用命令"><a href="#Pipenv常用命令" class="headerlink" title="Pipenv常用命令"></a>Pipenv常用命令</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ pipenvUsage: pipenv [OPTIONS] COMMAND [ARGS]...Options:  --where          显示项目文件所在路径  --venv           显示虚拟环境实际文件所在路径  --py             显示虚拟环境Python解释器所在路径  --envs           显示虚拟环境的选项变量  --rm             删除虚拟环境  --bare           最小化输出  --completion     完整输出  --man            显示帮助页面  --three &#x2F; --two  使用Python 3&#x2F;2创建虚拟环境（注意本机已安装的Python版本）  --python TEXT    指定某个Python版本作为虚拟环境的安装源  --site-packages  附带安装原Python解释器中的第三方库  --jumbotron      An easter egg, effectively.  --version        版本信息  -h, --help       帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Commands:  check      检查安全漏洞  graph      显示当前依赖关系图信息  install    安装虚拟环境或者第三方库  lock       锁定并生成Pipfile.lock文件  open       在编辑器中查看一个库  run        在虚拟环境中运行命令  shell      进入虚拟环境  uninstall  卸载一个库  update     卸载当前所有的包，并安装它们的最新版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="pipenv-使用"><a href="#pipenv-使用" class="headerlink" title="pipenv 使用"></a>pipenv 使用</h1><h2 id="创建环境，安装指定版本的python"><a href="#创建环境，安装指定版本的python" class="headerlink" title="创建环境，安装指定版本的python"></a>创建环境，安装指定版本的python</h2><p>首先需要看一下当前目录是否已经创建了虚拟环境，使用如下命令</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ pipenv -venv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>结果如下<br><img src="https://img.rockche.cn/mweb/16216685349589.jpg"><br>这说明当前的项目没有创建虚拟环境，可以使用Pipenv 来创建一个虚拟环境：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ pipenv –three<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>如果指定了 –two 或者 –three 选项参数，则会使用 python2 或者 python3 的版本安装，否则将使用默认的 python 版本来安装。当然也可以指定准确的版本信息：</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ pipenv install --python 3$ pipenv install --python 3.8$ pipenv install --python 2.7.14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>pipenv 会自动扫描系统寻找合适的版本信息，如果找不到的话，同时又安装了 pyenv 的话，则会自动调用 pyenv 下载对应版本的 python， 否则会报错。</p><p>这时候在当前项目根目录下会生成 Pipfile 和 Pipfile.lock 两个环境初始化文件</p><h2 id="进入-退出环境"><a href="#进入-退出环境" class="headerlink" title="进入|退出环境"></a>进入|退出环境</h2><p> 进入环境<br><code>pipenv shell</code><br> 退出环境<br><code>exit</code></p><h2 id="安装第三方包"><a href="#安装第三方包" class="headerlink" title="安装第三方包"></a>安装第三方包</h2><p>测试安装 selenium 包</p><p><code>pipenv install selenium</code></p><p>此时，Pipfile 里有最新安装的包文件的信息，如名称、版本等。用来在重新安装项目依赖或与他人共享项目时，你可以用 Pipfile 来跟踪项目依赖。</p><p>Pipfile 是用来替代原来的 requirements.txt 的，内容类似下面这样。source 部分用来设置仓库地址，packages 部分用来指定项目依赖的包，dev-packages 部分用来指定开发环境需要的包，这样分开便于管理。</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> Pipfile<span class="token punctuation">[</span><span class="token punctuation">[</span>source<span class="token punctuation">]</span><span class="token punctuation">]</span>name <span class="token operator">=</span> <span class="token string">"pypi"</span>url <span class="token operator">=</span> <span class="token string">"https://pypi.tuna.tsinghua.edu.cn/simple/"</span>verify_ssl <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>packages<span class="token punctuation">]</span>urllib3 <span class="token operator">=</span> <span class="token string">"*"</span>selenium <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">[</span>dev-packages<span class="token punctuation">]</span><span class="token punctuation">[</span>requires<span class="token punctuation">]</span>python_version <span class="token operator">=</span> <span class="token string">"3.8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Pipfile.lock 则包含你的系统信息，所有已安装包的依赖包及其版本信息，以及所有安装包及其依赖包的 Hash 校验信息。</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ Pipfile.lock<span class="token punctuation">&#123;</span>    <span class="token string">"_meta"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"hash"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"sha256"</span><span class="token builtin class-name">:</span> <span class="token string">"b02856f549692af24a14f79bfe022df973a9ea09ddfb4cbf7c7ecab5248ac322"</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"pipfile-spec"</span><span class="token builtin class-name">:</span> <span class="token number">6</span>,        <span class="token string">"requires"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"python_version"</span><span class="token builtin class-name">:</span> <span class="token string">"3.8"</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"sources"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"pypi"</span>,                <span class="token string">"url"</span><span class="token builtin class-name">:</span> <span class="token string">"https://pypi.tuna.tsinghua.edu.cn/simple/"</span>,                <span class="token string">"verify_ssl"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>,    <span class="token string">"default"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"selenium"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"hashes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"sha256:2d7131d7bc5a5b99a2d9b04aaf2612c411b03b8ca1b1ee8d3de5845a9be2cb3c"</span>,                <span class="token string">"sha256:deaf32b60ad91a4611b98d8002757f29e6f2c2d5fcaf202e1c9ad06d6772300d"</span>            <span class="token punctuation">]</span>,            <span class="token string">"index"</span><span class="token builtin class-name">:</span> <span class="token string">"pypi"</span>,            <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token string">"==3.141.0"</span>        <span class="token punctuation">&#125;</span>,        <span class="token string">"urllib3"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"hashes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"sha256:2f4da4594db7e1e110a944bb1b551fdf4e6c136ad42e4234131391e21eb5b0df"</span>,                <span class="token string">"sha256:e7b021f7241115872f92f43c6508082facffbd1c048e3c6e2bb9c2a157e28937"</span>            <span class="token punctuation">]</span>,            <span class="token string">"index"</span><span class="token builtin class-name">:</span> <span class="token string">"pypi"</span>,            <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token string">"==1.26.4"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>,    <span class="token string">"develop"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>那么Pipfile 和 Pipfile.lock 有什么用呢？<br>Pipfile 其实一个 TOML 格式的文件，标识了该项目依赖包的基本信息，还区分了生产环境和开发环境的包标识，作用上类似 requirements.txt 文件，但是功能更为强大。<br>Pipfile.lock 详细标识了该项目的安装的包的精确版本信息、最新可用版本信息和当前库文件的 hash 值，顾明思义，它起了版本锁的作用。<br>可以注意到当前 Pipfile.lock 文件中的 Selenium 版本标识为 ==3.141.0，意思是当前我们开发时使用的就是 3.141.0版本，它可以起到版本锁定的功能。</p><p>举个例子，刚才我们安装了 Selenium 3.141.0 的版本，即目前（2021.5.22）的最新版本。但可能 Selenium 以后还会有更新，比如某一天 Selenium 更新到了 3.2 版本，这时如果我们想要重新部署本项目到另一台机器上，假如此时不存在 Pipfile.lock 文件，只存在 Pipfile文件，由于 Pipfile 文件中标识的 Selenium 依赖为 selenium= “*”，即没有版本限制，它会默认安装最新版本的 Selenium，即 3.2，但由于 Pipfile.lock 文件的存在，它会根据 Pipfile.lock 来安装，还是会安装 Selenium 3.141.0，这样就会避免一些库版本更新导致不兼容的问题。</p><h2 id="安装指定版本包"><a href="#安装指定版本包" class="headerlink" title="安装指定版本包"></a>安装指定版本包</h2><p><code>pipenv install selenium==3.141.0 </code></p><h2 id="安装开发环境下的包"><a href="#安装开发环境下的包" class="headerlink" title="安装开发环境下的包"></a>安装开发环境下的包</h2><p>通常有一些Python包只在你的开发环境中需要，而不是在生产环境中，例如单元测试包。 加 –dev 表示包括 Pipfile 的 dev-packages 中的依赖。</p><p><code>pipenv install unittest --dev</code></p><p>django库现在将只在开发虚拟环境中使用。如果你要在你的生产环境中安装你的项目：</p><p><code>pipenv install</code></p><p>这不会安装unittest包。<br>但是，如果有一个开发人员将你的项目克隆到自己的开发环境中，他们可以使用–dev标志，将django也安装：</p><p><code>pipenv install –dev</code></p><p>也就是说一个–dev参数，帮你在同一个虚拟环境中又区分出了开发和非开发环境</p><h2 id="卸载第三方包"><a href="#卸载第三方包" class="headerlink" title="卸载第三方包"></a>卸载第三方包</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pipenv uninstall selenium //或者 pipenv uninstall --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h2 id="更新安装包"><a href="#更新安装包" class="headerlink" title="更新安装包"></a>更新安装包</h2><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">pipenv update selenium pipenv update # 更新所有安装包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="查看虚拟环境目录"><a href="#查看虚拟环境目录" class="headerlink" title="查看虚拟环境目录"></a>查看虚拟环境目录</h2><p><code>$ pipenv --venv</code></p><h2 id="查看项目根目录"><a href="#查看项目根目录" class="headerlink" title="查看项目根目录"></a>查看项目根目录</h2><p><code>$ pipenv --where</code></p><h2 id="检查软件包的完整性"><a href="#检查软件包的完整性" class="headerlink" title="检查软件包的完整性"></a>检查软件包的完整性</h2><p><code>$  pipenv check</code></p><h2 id="生成Pipfile-lock"><a href="#生成Pipfile-lock" class="headerlink" title="生成Pipfile.lock"></a>生成Pipfile.lock</h2><p>有时候可能 Pipfile.lock 文件不存在或被删除了，可以使用如下命令生成：<br><code>$ pipenv lock</code></p><h2 id="修改Pipenv下载源"><a href="#修改Pipenv下载源" class="headerlink" title="修改Pipenv下载源"></a>修改Pipenv下载源</h2><p>在使用pipenv install安装的过程中如果下载比较慢可以在pipfile文件中指定下载源：</p><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span><span class="token punctuation">[</span>source<span class="token punctuation">]</span><span class="token punctuation">]</span>name <span class="token operator">=</span> <span class="token string">"pypi"</span>url <span class="token operator">=</span> <span class="token string">"https://pypi.tuna.tsinghua.edu.cn/simple/"</span>verify_ssl <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">[</span>packages<span class="token punctuation">]</span>urllib3 <span class="token operator">=</span> <span class="token string">"*"</span>selenium <span class="token operator">=</span> <span class="token string">"*"</span><span class="token punctuation">[</span>dev-packages<span class="token punctuation">]</span><span class="token punctuation">[</span>requires<span class="token punctuation">]</span>python_version <span class="token operator">=</span> <span class="token string">"3.8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>Pip下载源</p><ul><li>阿里: <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li><li>豆瓣: <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li><li>清华: <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li></ul><h2 id="查看依赖树"><a href="#查看依赖树" class="headerlink" title="查看依赖树"></a>查看依赖树</h2><p><code>$ pipenv graph</code><br><img src="https://img.rockche.cn/mweb/16216706361891.jpg"></p><h2 id="锁定版本"><a href="#锁定版本" class="headerlink" title="锁定版本"></a>锁定版本</h2><p>更新 lock 文件锁定当前环境的依赖版本</p><p><code>$ pipenv lock</code></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://segmentfault.com/a/1190000015389565">Pipenv – 超好用的 Python 包管理工具</a><br><a href="https://cloud.tencent.com/developer/article/1739844">PyCharm+Pipenv虚拟环境开发和依赖管理的教程详解</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UI自动化学习笔记（三）</title>
    <link href="/2021/05/12/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AC%94%E8%AE%B03/"/>
    <url>/2021/05/12/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="下拉选择框"><a href="#下拉选择框" class="headerlink" title="下拉选择框"></a>下拉选择框</h1><ul><li>为什么单独使用下拉框？<ul><li>如果option选项没有value值的化，css定位或其他定位就不太方便。</li></ul></li><li>如何使用Select类<ul><li>操作：<ul><li>导包：from  selenium.webdriver.support.select improt Select</li><li> 实例化：s = Select(element)</li><li>调用方法：s.select_by_index()</li></ul></li></ul></li><li>提供哪些方法<ul><li>select_by_index() # 通过下标定位</li><li>select_by_value() # 通过value值</li><li>select_by_visible_text() #显示文本</li></ul></li><li>注意事项<ul><li>实例化select时，需要的参数为 select标签元素</li><li>调用Select类下面的方法，是通过索引、value属性值、显示文本去控制，而不需要click事件<span id="more"></span></li></ul></li></ul><h1 id="对话框处理"><a href="#对话框处理" class="headerlink" title="对话框处理"></a>对话框处理</h1><h2 id="为什么要处理对话框"><a href="#为什么要处理对话框" class="headerlink" title="为什么要处理对话框"></a>为什么要处理对话框</h2><p>如果页面有弹出框，不做处理，接下来的元素获取将不生效。</p><h2 id="对话框类型"><a href="#对话框类型" class="headerlink" title="对话框类型"></a>对话框类型</h2><ul><li>alert # 警告框</li><li>confirm # 确认框</li><li>prompt # 提示框</li></ul><h2 id="如何处理"><a href="#如何处理" class="headerlink" title="如何处理"></a>如何处理</h2><p>以上三种对话框，处理方法都一样。<br>步骤：</p><ul><li>切换到对话框<ul><li>方法：driver.switch_to.alert</li></ul></li><li>处理对话框<ul><li>alert.text # 获取文本</li><li>alert.accept() # 同意</li><li>alert.dismiss() # 取消</li></ul></li><li>提示<ul><li>无论以上哪个对话框，都可以使用取消、同意，因为调用的是后台的事件，根页面显示的按钮数量无关</li></ul></li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>driver.switch_to.alert 方法适合以上三种类型对话框，调用时没有括号</li><li>获取文本的方法，调用时没有括号 如：alert.text</li><li>在项目中不是所有的小窗口都是以上三种对话框。</li></ul><h1 id="滚动条处理"><a href="#滚动条处理" class="headerlink" title="滚动条处理"></a>滚动条处理</h1><h2 id="为什么要操作滚动条"><a href="#为什么要操作滚动条" class="headerlink" title="为什么要操作滚动条"></a>为什么要操作滚动条</h2><p>在web自动化中有些特殊场景，如：滚动条拉倒最底层，指定按钮才可用。</p><ul><li><p>如何操作 </p><ul><li><p>设置操作滚动条操作语句</p><p>如：js = “window.scrollTo(0,10000)”</p><ul><li>0: 左边距 –&gt;水平滚动条</li><li>10000：上边距 –&gt;垂直滚动条</li></ul></li><li><p>调用执行js方法，将设置js语句传入方法中</p><ul><li>方法：driver.execute_script(js)</li></ul></li></ul></li><li><p>说明</p><ul><li>在selenium中没有直接提供定位滚动条组件方法，但是它提供了执行js语句方法，可以通过js语句来控制滚动条操作。</li></ul></li></ul><h1 id="切换frame表单"><a href="#切换frame表单" class="headerlink" title="切换frame表单"></a>切换frame表单</h1><p>常用的frame表单有两种：frame、iframe</p><h2 id="为什么要切换"><a href="#为什么要切换" class="headerlink" title="为什么要切换"></a>为什么要切换</h2><p>当前目录内没有iframe表单页面元素信息，不切换的话无法找到元素</p><h2 id="如何切换"><a href="#如何切换" class="headerlink" title="如何切换"></a>如何切换</h2><p>方法：driver.switch_to.frame(“id\name\element”)</p><h2 id="为什么切换完之后要回到主目录"><a href="#为什么切换完之后要回到主目录" class="headerlink" title="为什么切换完之后要回到主目录"></a>为什么切换完之后要回到主目录</h2><p>ifame或frame只有在主目录才有相关元素信息，不会到主目录，切换语句会报错</p><h2 id="如何回到主目录"><a href="#如何回到主目录" class="headerlink" title="如何回到主目录"></a>如何回到主目录</h2><p>方法：driver.switch_to.default_content()</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>切换frame时，可以使用name、id、iframe元素</p><h1 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h1><h2 id="为什么要切换多窗口"><a href="#为什么要切换多窗口" class="headerlink" title="为什么要切换多窗口"></a>为什么要切换多窗口</h2><p>页面存在多个窗口时，selenium默认焦点只会在主窗口上的所有元素，不切换窗口，无法操作主窗口以外的窗口内元素</p><h2 id="如何切换-1"><a href="#如何切换-1" class="headerlink" title="如何切换"></a>如何切换</h2><ul><li><p>思路</p><ul><li>获取要切换的窗口句柄，调用切换方法进行切换。</li></ul></li><li><p>方法 </p><ul><li>driver.current_window_handle # 获取当前主窗口句柄</li><li> driver.window_handles # 获取当前由driver启动所有窗口句柄</li><li>driver.switch_to.window(handle) # 切换窗口</li></ul></li><li><p>步骤： </p><ul><li>获取当前窗口句柄 </li><li>点击链接 启动另一个窗口</li><li>获取当前所有窗口句柄</li><li>遍历所有窗口句柄</li><li>判断当前遍历的窗口句柄不等于当前窗口句柄</li><li>切换窗口操作</li></ul></li></ul><h1 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h1><ul><li><p>应用场景</p><ul><li>失败截图，让错误看的更直观</li></ul></li><li><p>方法</p><ul><li>driver.get_screenshot_as_file(imgepath)</li></ul></li><li><p>参数</p><ul><li>imagepath：为图片要保存的目录地址及文件名称<br>当前目录 ./test.png<br>上一级目录 ../test.png</li></ul></li><li><p>扩展</p><ul><li>多条用例执行失败，会产生多张图片，可以采用时间戳的形式，进去区分。</li><li>操作<ul><li>driver.get_screenshot_as_file(“../image/%s.png”%(time.strftime(“%Y_%m_%d %H_%M_%S”)))<br>strftime:将时间转为字符串函数</li></ul></li><li>注意<ul><li>%Y_%m_%d %H_%M_%S：代表，年 月 日 时 分 秒</li></ul></li></ul></li></ul><h1 id="验证码处理"><a href="#验证码处理" class="headerlink" title="验证码处理"></a>验证码处理</h1><p>验证码处理方式</p><ul><li>去掉验证码(项目在测试环境、公司自己的项目)</li><li>设置万能验证码(测试环境或线上环境，公司自己项目)</li><li>使用验证码识别技术 (由于现在的验证码千奇百怪，导致识别率太低)</li><li> 使用cookie解决(推荐)</li></ul><h1 id="Cookie处理"><a href="#Cookie处理" class="headerlink" title="Cookie处理"></a>Cookie处理</h1><ul><li>方法 <ul><li>driver.get_cookies() # 获取所有的cookie</li><li>driver.add_cookies({字典}) # 设置cookie</li></ul></li><li>步骤<ul><li>打开百度url driver.get(“<a href="http://www.baidu.com&quot;/">http://www.baidu.com&quot;</a>)</li><li>设置cookie信息： driver.add_cookie({“name”:”BDUSS”,”value”:”根据实际情况编写”})</li><li>暂停2秒以上</li><li>刷新操作 </li></ul></li><li>注意 <ul><li>以上百度BDUSS所需格式为百度网站特有，别的网站请自行测试</li><li>必须进行刷新操作</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UI自动化学习笔记（二）</title>
    <link href="/2021/05/01/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AC%94%E8%AE%B02/"/>
    <url>/2021/05/01/UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h2><ul><li>安装 pip install selenium</li><li>查看 pip show selenium</li><li>卸载 pip uninstall selenium</li><li>指定版本安装 pip install selenium==版本号</li><li>推荐使用python3.5以上版本</li></ul><h2 id="安装浏览器驱动"><a href="#安装浏览器驱动" class="headerlink" title="安装浏览器驱动"></a>安装浏览器驱动</h2><ul><li>火狐<ul><li><a href="https://github.com/mozilla/geckodriver/releases/">https://github.com/mozilla/geckodriver/releases/</a></li></ul></li><li>Chrome<ul><li><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></li></ul></li><li>IE<ul><li><a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a></li></ul></li></ul><h1 id="第一个案例"><a href="#第一个案例" class="headerlink" title="第一个案例"></a>第一个案例</h1><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 获取浏览器驱动</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chorme<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开url</span>dirver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"harp://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment"># 暂停3秒</span>sleep（<span class="token number">3</span>）<span class="token comment"># 关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="8种元素定位方式"><a href="#8种元素定位方式" class="headerlink" title="8种元素定位方式"></a>8种元素定位方式</h1><ul><li>id</li><li>name</li><li>class_name（使用元素的class属性定位）</li><li>tag_name（标签名称&lt;标签名…/&gt;）</li><li>link_text(定位超链接a标签)</li><li>partial_link_text(定位超链接 a标签 模糊)</li><li>Xpath（基于元素定位）</li><li>CSS（元素选择器）</li></ul><p>汇总</p><ol><li>基于元素属性特有定位方式(id\name\class_name)</li><li>基于元素标签名称定位：tag_name</li><li>定位超链接文本(link_text、partial_link_text)</li><li>基于元素路径定位(xpath)</li><li>基于选择器(css)</li></ol><h2 id="id定位"><a href="#id定位" class="headerlink" title="id定位"></a>id定位</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>通过元素的id属性定位，id一般情况下在当前页面中是唯一。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>元素必须要有id属性</p><h2 id="name定位"><a href="#name定位" class="headerlink" title="name定位"></a>name定位</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>通过元素的name属性来定位， name一般名称为重复。</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">drivr<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span>name）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h3><p>元素须要有name属性 </p><h2 id="class-name定位"><a href="#class-name定位" class="headerlink" title="class_name定位"></a>class_name定位</h2><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>通过元素的class属性来定位，class属性一般为多个值。</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h3><p>元素必须要有class属性 </p><h2 id="tag-name定位"><a href="#tag-name定位" class="headerlink" title="tag_name定位"></a>tag_name定位</h2><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><p>是通过元素的标签名称来定位，标签名(查看元素时尖括号(&lt;)紧挨着的单词或字母就是标签名)(标签名也就是元素名)</p><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">"标签名"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果页面中存在多个相同标签，默认返回第一个标签元素。</p><h2 id="link-text定位"><a href="#link-text定位" class="headerlink" title="link_text定位"></a>link_text定位</h2><h3 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h3><p>定位超链接标签</p><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>link_text:只能使用精准匹配(a标签的全部文本内容)</p><h2 id="partial-link-text【推荐】"><a href="#partial-link-text【推荐】" class="headerlink" title="partial_link_text【推荐】"></a>partial_link_text【推荐】</h2><h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><p>定位超链接标签</p><h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li>可以使用精准或模糊匹配，如果使用模糊匹配最好使用能代表唯一的关键词</li><li>如果有多个值，默认返回第一个值</li></ol><h2 id="Xpath定位"><a href="#Xpath定位" class="headerlink" title="Xpath定位"></a>Xpath定位</h2><h3 id="Xpath常用的定位策略"><a href="#Xpath常用的定位策略" class="headerlink" title="Xpath常用的定位策略"></a>Xpath常用的定位策略</h3><ol><li><p>路径<br>1). 绝对路径：<br>语法：以单斜杠开头逐级开始编写，不能跳级。如：/html/body/div/p[1]/input<br>2). 相对路径<br>语法：以双斜杠开头，双斜杠后边跟元素名称，不知元素名称可以使用<em>代替。 如： //input //</em></p></li><li><p>路径结合属性<br>语法：在Xpath中，所有的属性必须使用@符号修饰 如：//*[@id=’id值’]</p></li><li><p>路径结合逻辑(多个属性)<br>语法：//*[@id=”id值” and @属性=’属性值’]</p></li><li><p>路径结合层级<br>语法：//*[@id=’父级id属性值’]/input</p><div class="code-wrapper"><pre><code>提示：    1. 一般见识使用指定标签名称，不使用*代替，效率比较慢。    2. 无论是绝对路径和相对路径，/后面必须为元素的名称或者*    3. 扩展：在工作中，如果能使用相对路径绝对不使用绝对路径。</code></pre></div></li></ol><h3 id="Xpath扩展"><a href="#Xpath扩展" class="headerlink" title="Xpath扩展"></a>Xpath扩展</h3><div class="code-wrapper"><pre><code>    1. //*[text()=&#39;XXX&#39;] # 定位文本值等于XXX的元素          提示：一般适合 p标签，a标签     2. //*[contains(@属性,&#39;xxx&#39;)] # 定位属性包含xxx的元素 【重点】        提示：contains为关键字，不可更改。     3. //*[starts-with(@属性,&#39;xxx&#39;)] # 定位属性以xxx开头的元素        提示：starts-with为关键字不可更改    </code></pre></div><h2 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h2><h3 id="说明-6"><a href="#说明-6" class="headerlink" title="说明"></a>说明</h3><ol><li>CSS一种标记语言，焦点：数据的样式。控制元素的显示样式，就必须先找到元素，在css标记语言中找元素使用css选择器；</li><li>css定位就是通过css选择器工具进行定位。</li><li>极力推荐使用，查找元素的效率比xpath高，语法比xpath更简单。</li></ol><h3 id="方法-6"><a href="#方法-6" class="headerlink" title="方法"></a>方法</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="常用测试略："><a href="#常用测试略：" class="headerlink" title="常用测试略："></a>常用测试略：</h3><ol><li>id 选择器<br>前提：元素是必须有id属性<br>语法：#id  如：#passwordA</li><li>class 选择器<br>前提：元素是必须有class属性<br>语法：.class  如：.telA</li><li>元素选择器<br>语法：element  如：input</li><li>属性选择器<br>语法：[属性名=属性值]</li><li>层级选择器<br>语法： </li><li>p&gt;input </li><li>p input<br>提示：&gt;与空格的区别，大于号必须为子元素，空格则不用。</li></ol><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><ol><li>[属性^=’开头的字母’] # 获取指定属性以指定字母开头的元素</li><li>[属性$=’结束的字母’] # 获取指定属性以指定字母结束的元素</li><li>[属性*=’包含的字母’] # 获取指定属性包含指定字母的元素</li></ol><p>复制xpath:/html/body/form/div/fieldset/p[1]/input<br>复制最简：//*[@id=”userA”]<br>复制CSS路径：html body form div#zc fieldset p#p1 input#userA</p><p>提示： </p><ol><li>虽然借助工具可以快速生成xpath路径和css语法，但是前期不建议使用。</li><li>工具再智能，没有人智能。</li></ol><h2 id="定位一组元素"><a href="#定位一组元素" class="headerlink" title="定位一组元素"></a>定位一组元素</h2><h3 id="方法-7"><a href="#方法-7" class="headerlink" title="方法"></a>方法</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_elements_by_xxx<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p>返回结果：类型为列表，要对列表进行访问和操作必须指定下标或进行遍历，[下标从0开始]</p><h2 id="扩展8种元素定位的底层实现"><a href="#扩展8种元素定位的底层实现" class="headerlink" title="扩展8种元素定位的底层实现"></a>扩展8种元素定位的底层实现</h2><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>xxx<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>By.xxx :为By类的类型 如：By.ID<br>value: 元素的定位值 如： “userA”<br>By类：需要导包 位置： from selenium.webdriver.common.by import By</p><h1 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h1><h2 id="方法-8"><a href="#方法-8" class="headerlink" title="方法"></a>方法</h2><ul><li>send_keys() # 输入方法</li><li>click() # 点击方法</li><li>clear() # 清空</li></ul><h1 id="浏览器常用操作API"><a href="#浏览器常用操作API" class="headerlink" title="浏览器常用操作API"></a>浏览器常用操作API</h1><h2 id="方法-9"><a href="#方法-9" class="headerlink" title="方法"></a>方法</h2><ul><li><p>driver.maximize_window() # 最大化浏览器</p></li><li><p>driver.set_window_size(w, h) # 设置浏览器大小 单位像素</p></li><li><p>driver.set_window_position(x, y) # 设置浏览器位置</p></li><li><p>driver.back() # 后退操作</p></li><li><p>driver.forward() # 前进操作</p></li><li><p>driver.refresh() # 刷新操作</p></li><li><p>driver.close() # 关闭当前主窗口(主窗口：默认启动哪个界面，就是主窗口)</p></li><li><p>driver.quit() # 关闭由driver对象启动的所有窗口</p></li><li><p>driver.title # 获取当前页面title信息</p></li><li><p>drive.current_url # 获取当前页面url信息</p></li></ul><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><ul><li><p>driver.title 和 driver.current_url 没有括号，应用场景：一般为判断上步操作是否执行成功。</p><span id="more"></span></li><li><p>driver.maximize_window() # 一般为我的前置代码，在获取driver后，直接编写最大化浏览器</p></li><li><p>driver.refresh() 应用场景，在后面的cookie章节会使用到。</p></li><li><p>driver.close()与driver.quit()区别：</p><ul><li><div class="code-wrapper"><pre><code>close():关闭当前主窗口</code></pre></div></li><li><div class="code-wrapper"><pre><code>quit():关闭由driver对象启动的所有窗口</code></pre></div></li></ul></li><li><p>提示：如果当前只有1个窗口，close与quit没有任何区别。</p></li></ul><h1 id="元素信息操作API"><a href="#元素信息操作API" class="headerlink" title="元素信息操作API"></a>元素信息操作API</h1><h2 id="方法-10"><a href="#方法-10" class="headerlink" title="方法"></a>方法</h2><ul><li>text 获取元素文本  如：driver.text</li><li>size 获取元素大小  如：driver.size </li><li>get_attribute 获取元素属性值 如：driver.get_attribute(“id”)</li><li>is_displayed 判断元素是否可见 如：element.is_displayed()</li><li>is_enabled 判断元素是否可用 如: element.is_enabled()</li><li>is_selected 判断元素是否被选中 如：element.is_selected()        </li></ul><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><ul><li>text和size调用时 无括号</li><li>get_attribute一般应用场景：判断一组元素是否为想要的元素或者判断元素属性值是否</li><li>is_displayed、is_enabled、is_selected，在特殊应用场景中使用。</li></ul><h1 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h1><h2 id="为什么使用鼠标操作"><a href="#为什么使用鼠标操作" class="headerlink" title="为什么使用鼠标操作"></a>为什么使用鼠标操作</h2><p>为了满足丰富的html鼠标效果，必须使用对于的方法</p><h2 id="鼠标事件对应的方法在哪个类中"><a href="#鼠标事件对应的方法在哪个类中" class="headerlink" title="鼠标事件对应的方法在哪个类中"></a>鼠标事件对应的方法在哪个类中</h2><p>from selenium.webdirver.common.action_chains import ActionChains</p><h2 id="鼠标时间常用的方法"><a href="#鼠标时间常用的方法" class="headerlink" title="鼠标时间常用的方法"></a>鼠标时间常用的方法</h2><ul><li>context_click() #右击<ul><li>应用：context_click(element).perform()</li></ul></li><li>double_click() #双击<ul><li>应用：double_click(element).perform()</li></ul></li><li>drag_and_drop() # 拖拽<ul><li>应用：drag_and_drop(source, target).perform</li></ul></li><li>move_to_element() #悬停</li><li>move_to_element(element).perform()</li><li>perform() # 执行以上事件方法</li></ul><h1 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h1><h2 id="键盘对应的方法在Keys类中"><a href="#键盘对应的方法在Keys类中" class="headerlink" title="键盘对应的方法在Keys类中"></a>键盘对应的方法在Keys类中</h2><p>包：from selenium.webdriver.common.keys import Keys</p><h2 id="常用的快捷键："><a href="#常用的快捷键：" class="headerlink" title="常用的快捷键："></a>常用的快捷键：</h2><p>CONTROL：Ctrl键<br>其他，请参考Keys底层定义的常量</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>组合键：element.send_keys(Keys.XXX, ‘a’)<br>单键：element.send_keys(Keys.XXX)</p><h1 id="元素等待"><a href="#元素等待" class="headerlink" title="元素等待"></a>元素等待</h1><h2 id="为什么要设置元素等待"><a href="#为什么要设置元素等待" class="headerlink" title="为什么要设置元素等待"></a>为什么要设置元素等待</h2><p>由于电脑配置或网络原因，在查找元素时，元素代码未在第一时间内被加载出来，而抛出未找到元素异常。</p><h2 id="什么是元素等待"><a href="#什么是元素等待" class="headerlink" title="什么是元素等待"></a>什么是元素等待</h2><p>元素在第一次未找到时，元素等待设置的时长被激活，如果在设置的有效时长内找到元素，继续执行代码，如果超出设置的时长未找打元素，抛出未找到元素异常。</p><h2 id="元素等待分类"><a href="#元素等待分类" class="headerlink" title="元素等待分类"></a>元素等待分类</h2><ul><li><p>隐式等待</p><ul><li>方法：driver.implicitly_wait(30) # 一般情况下设置30秒<br>特色：<ul><li>针对所有元素生效</li><li>一般情况下为前置必写代码(1.获取浏览器驱动对象；2. 最大化浏览器；3. 设置隐式等待)</li></ul></li></ul></li><li><p>显示等待</p><ul><li><p>导包</p><ul><li><div class="code-wrapper"><pre><code class="python">from selenium.webdirver.support.wait import WebDriverWait</code></pre></div></li></ul></li><li><p>WebDriverWait(driver,timout,poll_frequency=0.5)</p><ul><li>driver: 浏览器驱动对象</li><li>timeout：超时的时长。单位：秒</li><li>poll_frequency：检测间隔时间，默认0.5秒</li></ul></li><li><p>调用方法 untili(method): 直到…时</p><ul><li>method：函数名称，该函数用来实现对元素的定位</li><li>一般使用匿名函数：lambda x:x.find_element_by_id(“xxxxx”)</li></ul></li></ul></li><li><p>显示等待与隐式等待区别：</p><ul><li>显示等待：针对单个元素生效</li><li>隐式等待：针对全局元素生效</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>自动化测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UI自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性能测试笔记（一）</title>
    <link href="/2021/04/19/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/04/19/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h2 id="性能测试概述"><a href="#性能测试概述" class="headerlink" title="性能测试概述"></a>性能测试概述</h2><h3 id="为什么要进行性能测试？"><a href="#为什么要进行性能测试？" class="headerlink" title="为什么要进行性能测试？"></a>为什么要进行性能测试？</h3><p>1、业务需求</p><ul><li>明确的需求指标</li><li>软件技术框架的选型</li><li>硬件服务器的选型</li></ul><p>2、招聘需求</p><h3 id="性能的关注点："><a href="#性能的关注点：" class="headerlink" title="性能的关注点："></a>性能的关注点：</h3><ul><li>响应时间</li><li>资源<ul><li>CPU</li><li>内存</li><li>磁盘</li><li>网络<span id="more"></span></li></ul></li></ul><h3 id="什么是性能测试？"><a href="#什么是性能测试？" class="headerlink" title="什么是性能测试？"></a>什么是性能测试？</h3><ul><li>测试软件的性能</li><li>主要测试哪几个方面：<ul><li>后端处理性能—响应时间</li><li>服务器硬件资源（CPU、内存、磁盘）</li><li>中间件、网络、 数据库、架构设计等是否存在瓶颈</li></ul></li></ul><h3 id="性能测试的目的："><a href="#性能测试的目的：" class="headerlink" title="性能测试的目的："></a>性能测试的目的：</h3><ul><li>评估当前系统的能力——发布时</li><li>寻找性能瓶颈，优化性能——线上出问题，定位问题时使用</li><li>预估是否满足未来性能要求——为将来准备</li></ul><h3 id="性能测试和功能测试："><a href="#性能测试和功能测试：" class="headerlink" title="性能测试和功能测试："></a>性能测试和功能测试：</h3><ul><li>焦点：<ul><li>功能：软件功能是否满足需求的功能规格。关注点：功能（正向、逆向）</li><li>性能：软件性能是否满足业务场景的需求。关注点：性能（时间、资源）</li></ul></li><li>关系：<ul><li>功能和性能测试是相辅相成的，一般都会做</li><li>在功能测试的后期（功能稳定以后）才会进行性能测试</li></ul></li></ul><h2 id="性能测试分类："><a href="#性能测试分类：" class="headerlink" title="性能测试分类："></a>性能测试分类：</h2><p>常见分类：</p><ul><li>负载测试</li><li>压力测试</li><li>并发测试</li><li>稳定性测试</li></ul><p>基准测试策略：无论选取之前的任何一种测试方式，都需要先进行基准测试，作为后续测试结果的对比。</p><h3 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h3><p>通过逐步增加系统负载，观察系统性能的变化，在满足系统的性能指标的前提下，服务器所能承受的最大负载量的测试。</p><p>目的：找到系统能承受的最优负载量</p><h3 id="压力测试："><a href="#压力测试：" class="headerlink" title="压力测试："></a>压力测试：</h3><p>通过逐步增加系统负载，观察系统性能的变化，测试性能在什么负载情况下处理失效的状态。</p><p>目的：找到系统所有承受的极限负载量。</p><h3 id="稳定性测试："><a href="#稳定性测试：" class="headerlink" title="稳定性测试："></a>稳定性测试：</h3><p>通过给系统加载一定的业务压力（模拟用户真实的业务压力），运行一段时间，检查系统是否稳定。</p><p>一段时间：通常指的是：24小时，3*24小时，7*24小时</p><h3 id="并发测试："><a href="#并发测试：" class="headerlink" title="并发测试："></a>并发测试：</h3><p>通过模拟用户并发访问同一应用、模块、数据，测试软件系统是否存在问题。</p><h2 id="性能测试的指标"><a href="#性能测试的指标" class="headerlink" title="性能测试的指标"></a>性能测试的指标</h2><h3 id="吞吐量："><a href="#吞吐量：" class="headerlink" title="吞吐量："></a>吞吐量：</h3><p>代表服务器每秒能处理的业务请求的数量，直接体现服务器的性能承载能力</p><p>常见的吞吐量衡量方式：</p><ul><li>从业务角度来说，每天业务数，每小时业务数，每天用户数，每天业务访问数等</li><li>从网络角度来说，每天字节数</li><li>从技术角度来说，TPS、QPS</li></ul><h4 id="并发数："><a href="#并发数：" class="headerlink" title="并发数："></a>并发数：</h4><p>定义：并发测试时的用户数。</p><p>并发用户数：某一时刻同时往服务器发送请求的用户数。</p><p>并发补充：</p><ul><li>相对并发：同一时刻同时访问同一个应用</li><li>绝对并发：同一时刻同时访问同一个操作</li></ul><h3 id="响应时间："><a href="#响应时间：" class="headerlink" title="响应时间："></a>响应时间：</h3><p>指的是用户从客户端发出请求开始，到客户端收到服务器发送的响应为止的所有时间。</p><p>响应时间=服务器处理时间+网络传输时间</p><h3 id="点击数："><a href="#点击数：" class="headerlink" title="点击数："></a>点击数：</h3><p>衡量web服务器性能指标（web项目特有的指标）</p><p>提示：</p><p>提示：</p><p>1、点击数不是一般所说的在页面上的点击次数。</p><p>2、指的是在页面上点击以后，浏览器往服务器发送的HTTP请求资源（图片、js、css）的请求数量</p><p>3、通常可以使用每秒点击数来衡量服务器处理能力。</p><ul><li></li></ul><h3 id="错误率："><a href="#错误率：" class="headerlink" title="错误率："></a>错误率：</h3><p>指的是系统在负载情况下，业务失败的概率。</p><p>提示：</p><p>1、不同系统对错误率要求不同。最低不要超过千分之五</p><p>2、稳定性好的系统，大部分是由于超时引起的错误。</p><h3 id="TPS："><a href="#TPS：" class="headerlink" title="TPS："></a>TPS：</h3><p>每秒事务数，每秒服务器能处理的业务数量</p><p>事务：</p><ul><li>用户角度，指的是业务，可以包括完成业务功能的一个或者多个操作</li><li>代码角度，可以包括一段或者多段代码</li></ul><p>tps = 并发数/平均响应时间。</p><h3 id="QPS："><a href="#QPS：" class="headerlink" title="QPS："></a>QPS：</h3><p>每秒查询数，每秒服务器能处理的请求数量</p><p>应用：控制服务器每秒处理的请求数，通常在负载、压力测试时用来模拟用户的业务背景压力</p><h3 id="资源利用率："><a href="#资源利用率：" class="headerlink" title="资源利用率："></a>资源利用率：</h3><p>是指系统各种资源的使用情况，使用率=已使用的资源/全部的资源*100%</p><p>常见的资源使用率指标：</p><ul><li>CPU，不超过80%</li><li>内存，不超过80%</li><li>磁盘，不高于90%</li><li>网络，不超过80%</li></ul><h2 id="性能测试的流程："><a href="#性能测试的流程：" class="headerlink" title="性能测试的流程："></a>性能测试的流程：</h2><p>指导性能测试工作的步骤。</p><p>常见的流程有如下几步：</p><p>1、性能测试的需求分析</p><p>2、性能测试计划和方案</p><p>3、性能测试用例的编写</p><p>4、性能测试执行</p><ul><li>编写/录制测试脚本</li><li>搭建场景</li><li>运行脚本</li><li>系统性能调优</li></ul><p>5、性能测试报告和总结</p><h3 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h3><p>1、熟悉被测系统</p><ul><li>熟悉系统的业务功能</li><li>熟悉系统的技术架构</li></ul><p>2、明确性能测试内容</p><ul><li>从业务角度明确。关键业务</li><li>从技术角度明确。对资源消耗比较大的业务</li></ul><p>3、明确性能测试策略（根据目标来明确）：</p><ul><li>负载测试</li><li>压力测试</li><li>稳定性测试</li><li>并发测试</li></ul><p>4、明确性能测试的指标</p><ul><li>有明确需求指标</li><li>无明确需求指标<ul><li>查找相关资源</li><li>竞品分析</li><li>预估未来的性能</li></ul></li></ul><h3 id="性能测试计划："><a href="#性能测试计划：" class="headerlink" title="性能测试计划："></a>性能测试计划：</h3><p>主要内容：</p><p>1、项目背景</p><p>2、测试目标</p><p>3、人员安排</p><p>4、时间进度安排</p><p>5、性能测试环境（系统架构、软硬件配置、测试数据）</p><p>6、性能测试工具（测试工具、监控工具）</p><p>7、测试策略</p><ul><li>确定性能测试类型（负载、压力、稳定性、并发）</li><li>确定性能测试场景（单一场景、混合场景）</li></ul><p>8、风险控制</p><h3 id="性能测试用例："><a href="#性能测试用例：" class="headerlink" title="性能测试用例："></a>性能测试用例：</h3><p>测试用例作用是用于覆盖测试需求</p><p>内容包括：</p><ul><li>测试步骤、预期结果</li><li>并发数</li><li>测试策略（参数化、关联、检查点。。。。）</li></ul><h3 id="测试脚本的编写-录制："><a href="#测试脚本的编写-录制：" class="headerlink" title="测试脚本的编写/录制："></a>测试脚本的编写/录制：</h3><p>根据测试用例的要求来使用工具进行编写/录制即可。</p><p>注意：关注代码冗余的问题</p><h3 id="搭建场景："><a href="#搭建场景：" class="headerlink" title="搭建场景："></a>搭建场景：</h3><p>将测试脚本按照用户业务场景来配置性能的测试工具。</p><p>注意点：</p><ul><li>虚拟用户数量及启动虚拟用户的方式</li><li>场景的相关设置（如：集合点）</li><li>脚本之间是否存在依赖问题</li></ul><h3 id="运行脚本："><a href="#运行脚本：" class="headerlink" title="运行脚本："></a>运行脚本：</h3><p>本质上就是运行场景</p><p>注意点：</p><ul><li>负载的测试机不能满足模拟的虚拟用户数量</li><li>没有考虑缓存</li><li>没有模拟用户真实的环境</li><li>性能用例运行次数过少</li></ul><h3 id="性能调优："><a href="#性能调优：" class="headerlink" title="性能调优："></a>性能调优：</h3><p>性能测试人员经过对测试结果的对比，发现系统性能的瓶颈。</p><p>提示：</p><p>（1）调优人员：以开发为主导，数据库管理员、系统管理员、网络管理员、性能测试分析人员配合进行性能问题的调优</p><p>（2）验证：性能测试验证通常需要很多轮；每轮回归时需要对所有的测试指标进行全方位的对比</p><p>系统调优由易到难的顺序：</p><ul><li>硬件问题</li><li>网络问题</li><li>应用服务器、数据库服务器的配置问题</li><li>源代码、数据库脚本</li><li>系统架构问题</li></ul><h3 id="性能测试报告："><a href="#性能测试报告：" class="headerlink" title="性能测试报告："></a>性能测试报告：</h3><p>1、对整体性能测试阶段的回顾（覆盖需求、测试不同阶段的进度和产物、性能测试结果的分析）——技术角度</p><p>2、对整体性能测试阶段风险的管理——管理的角度</p><p>3、对项目性能测试结果的总结（通过与否、经验和教训）</p><h2 id="性能测试的工具"><a href="#性能测试的工具" class="headerlink" title="性能测试的工具"></a>性能测试的工具</h2><p>Loadrunner</p><p>特点：</p><p>（1）工业化的性能测试工具，能支持大量用户，提供详细的报表来提供测试分析的数据</p><p>（2）支持的协议多</p><p>（3）使用C语言来编写的</p><p>优点：</p><p>（1）支持用户量大（以万为单位）</p><p>（2）提供精确的报表</p><p>（3）支持IP欺骗</p><p>缺点：</p><p>（1）收费</p><p>（2）体积大</p><p>（3）无法定制</p><p>Jmeter</p><p>优点：</p><p>（1）开源免费</p><p>（2）体积小</p><p>（3）有丰富的第三方插件</p><p>缺点：</p><p>（1）不支持IP欺骗</p><p>（2）报表的精度比lr要差</p>]]></content>
    
    
    <categories>
      
      <category>性能测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冉冉你好，欢迎来到这个世界</title>
    <link href="/2021/02/25/%E7%BB%99%E5%B0%8F%E5%86%89%E5%86%89%E7%9A%84%E4%BF%A11/"/>
    <url>/2021/02/25/%E7%BB%99%E5%B0%8F%E5%86%89%E5%86%89%E7%9A%84%E4%BF%A11/</url>
    
    <content type="html"><![CDATA[<p>嗨，你好啊，冉冉。今天是你出生的第10天，我终于有了时间可以坐下来给你写点东西了，最近一直都很忙，忙着给你换尿布，忙着给你办理户口，社保，但好在妈妈的奶水够你吃，解放了我，我不用再给你冲奶粉了。</p><span id="more"></span><h1 id="喂你吃奶是个技术活"><a href="#喂你吃奶是个技术活" class="headerlink" title="喂你吃奶是个技术活"></a>喂你吃奶是个技术活</h1><p>之前听同事说洗奶瓶、冲奶粉是很有“技术含量”的一件事时，我还不信，心里想着洗个奶瓶喂喂奶有什么难的，直到我在医院被你折腾了几个不眠之夜后，我才知道他没有骗我。奶瓶消毒、控制水温、冲奶粉、把你“固定”在怀里，然后再一勺一勺的喂你，每一步都必须精准无误，要不然结局就是奶冰了或者喂的你脖子里都是。有一说一，对于新手爸爸来说，如何快速的给娃喂奶，真的是个技术活。</p><h1 id="你妈妈真的很伟大"><a href="#你妈妈真的很伟大" class="headerlink" title="你妈妈真的很伟大"></a>你妈妈真的很伟大</h1><p>13号的时候你妈妈有点见红了，我们等了一天还是没有开始发作，14号的早上，我们去了医院，医生检查了之后说还没有开宫口，可以回家等着，没想到晚上吃完饭，你妈妈就可以发作了，先是1小时一次的酸痛，然后半小时一次，起初我们还不确定这是不是宫缩，觉得可以先不用去医院，免得去了医生还是喊我们回家等，直到后来开始20分钟疼一次，我和你妈觉得情况不对，于是赶紧开车去医院，凌晨路上没什么车，外面淅淅沥沥的下着小雨。<br>到了医院之后挂了急诊，医生初步检查了之后说宫口开了个小洞，可以先住院。办理完住院手续已经是15号的凌晨2点了，原本我和你妈还以为你会在2月14日情人节的时候出来，哈哈。<br>然后就是漫长的等待，一个晚上疼痛都没有消停，你妈也显得愈发痛苦，大概5点多医生告诉我们胆汁酸指标过高，属于 重度妊娠期肝内胆汁淤积症 ，顺产风险极高。<br>犹豫再三，我们最终还是决定把你剖出来，虽然你的胎心还算不错，但是我和妈妈还是不敢去冒险尝试顺产。</p><p>7点多的时候妈妈被推进了手术室，手术很快。9点多你和妈妈被推了出来，我和你爷爷奶奶还有外婆只瞅了你们娘两一眼你们就又被推进了ICU观察，然后一观察就从早上9点观察到了晚上8点。然后爸爸就一直在外面等你和妈妈，医院也蛮坑，也不给家属说一声你们的情况，愣是在那里干等。后来你妈妈告诉我你们在ICU其实很无聊，好在医生把你放在了妈妈旁边，她可以看着你。而爸爸就很难受了，在外面完全不清楚里面是什么情况，这时候的时间过得是最漫长的。</p><p>你妈妈虽然没有为你骨开十指，但也为你剖腹七层。十月怀胎真的蛮不容易，你妈妈真的很伟大，你以后可一定要对你妈妈好哦。</p><h1 id="来看看你的萌照吧"><a href="#来看看你的萌照吧" class="headerlink" title="来看看你的萌照吧"></a>来看看你的萌照吧</h1><p><img src="https://img.rockche.cn/ran"></p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>给小冉冉的信</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再见2020</title>
    <link href="/2021/01/01/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/01/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>糟糕的2020年终于要过去了，在这一年的最后一天里，思来想去，觉得还是应该对自己的2020进行下年终总结，毕竟这一年因为疫情的原因，坎坷比往年多了不少。</p><span id="more"></span><p>春节的时候，赶在疫情爆发之前回了老家，待了不到一个礼拜，又赶在小县城“封锁”之前“逃”回了成都。每天都在忐忑不安的情绪中刷着新闻，搜索着关于疫情的各种消息，期盼不再有新增病例，然后就是某个清晨起来看到了科比发生意外的新闻，那一瞬间，真的感觉2020的开头槽糕透顶了，仿佛所有的坏事情都约好了一样蜂拥而来。但好在后来美好的事情也接踵而至，从某种角度来看，2020年仍然值得被感激。<br><img src="https://img.rockche.cn/2020-1.jpeg"></p><h1 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h1><p>要说整个2020最美好的事情是什么呢，我觉得应该就是我要当爸爸了吧。宝宝还有1个多月就要出生了，心情有些复杂，既兴奋又紧张。看着老婆的肚子一天天变大，感叹生命诞生的神奇和做母亲的不易。从此之后我就要成为一个父亲了，需要承担更多的责任。我和老婆给宝宝起了个很逗的小名：大结实。哈哈，希望(他/她)可以结结实实的长大，健健康康的成长。<br>然后呢就是今年买了人生中的第一辆车——我心心念念的马自达3.虽然不是什么好车，但是至少不用再去挤公交和地铁了，有一说一，有了车之后，通勤时间缩短了不少，舒适度也比公共交通提升了不止一个leave。提车的那天从4S店开回家开的手心冒汗，毕竟拿到驾照之后就没有摸过车，直接上三环还是需要不小的勇气，好在经过一年的磨练，我也成为了绕城最靓的仔，区区三环，已经是小菜一碟了。<br>今年也学习了一些理财的知识，在支付宝里投了点小钱买了几只基金。得益于白酒王者般的业绩。让我第一次买基金就赚到了钱，虽然赚的不多，但也算是一个好的开始。</p><h1 id="关于个人"><a href="#关于个人" class="headerlink" title="关于个人"></a>关于个人</h1><p>今年我的体重完全失去了控制，原来我以为130是我的极限了，没想到现在都快到了150。买车之后运动也就变少了，原来坐公交地铁的时候还能走走路，现在连这唯一消耗卡路里的“运动”都给丢了。再加上几乎每天都是八点多吃完饭和晚睡的原因，体重很容易就失去了控制。2021年，减肥这件事情，真的该提上日程了。<br>除了体重的增长，今年比较大的一个感觉是，自己好像更加的焦虑了。这种“焦虑”既不是因为工作压力导致的，也不是因为生活琐事导致的，而是一种莫名而来的焦虑感。焦虑自己未来是否能成为一个好爸爸、焦虑自己每一年的进步是否跟得上年轻人的节奏、焦虑父母衰老的速度、焦虑于外界不断强行塞给自己的焦虑感。但还好自己可以正确的看待这些焦虑，试着去接受。当然，接受不代表这不再向往美好。我依然希望自己可以在新的一年，保持运动，健康饮食，早睡早起。<br>我一直觉得自己是一个懒人，立了那么多flag，能坚持下去的，少得可怜。就比如我原本打算在2020年的最后一天写完这篇总结，但是还是把它拖到了2021年。所以希望新的一年自己可以变得稍微勤奋一点吧。</p><h1 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h1><p>在工作方面，我时常对自己有一些误判。两前这种情况更严重一些，我总是过高的估计自己对于一件事情的完成度，认为用心了就可以做到，后来发现人违背天赋做事时，真的是吃力不讨好。<br>所以在2020年，经济形势下滑的这一年，我没有敢再去做过多的尝试，而是一直在梳理自己，梳理自己的差距，梳理自己更适合去做点什么。<br>关于工作具体的总结，就不在这里记录了（<del>烂癌又犯了</del>）</p><h1 id="2021目标"><a href="#2021目标" class="headerlink" title="2021目标"></a>2021目标</h1><p>如果年终总结只有对上一年的总结，而没有立新一年的flag，那将毫无意义，所以为了不那么敷衍，我还是立几个flag吧</p><ul><li>减肥至少10斤</li><li>个人博客能做到月更</li><li>读完至少3本书</li><li>测试团队能稳定（战友们可千万别离职）</li><li>能不那么懒，学会制定计划</li><li>最最最后最重要的：<ul><li>希望2月的时候，大结实能平平安安的出生，老婆不要受太多的罪</li><li>希望家人们身体健康，吃嘛嘛香</li></ul></li></ul><p>就这样，2021，一起加油💪</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年终总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习3-函数</title>
    <link href="/2020/12/18/python3/"/>
    <url>/2020/12/18/python3/</url>
    
    <content type="html"><![CDATA[<h1 id="函数是什么"><a href="#函数是什么" class="headerlink" title="函数是什么"></a>函数是什么</h1><p>函数是组织好的，可以被重复使用，用来实现单一，或者相关联功能的代码，函数的使用可以提高应用的模块性，和代码的复用性<br>python提供了很多内建函数，比如print(),input()等。我们也可以自己创建函数</p><span id="more"></span><h2 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h2><p>我们可以定义一个自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以def关键词开头，后接函数标识符名称和（）</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明</li><li>函数内容以冒号 : 起始，并且缩进</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我们用函数来输出“hello world！”</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><p>函数中带上参数变量：</p><ul><li>比较两个数的大小，返回较大的数</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token builtin">max</span>（a<span class="token punctuation">,</span> b）<span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">></span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b        a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果为：</p><blockquote><p>4</p></blockquote><ul><li>计算面积：</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> width<span class="token operator">*</span>heightw <span class="token operator">=</span> <span class="token number">4</span>h <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"width ="</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token string">" height ="</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token string">" area ="</span><span class="token punctuation">,</span> area<span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果：</p><blockquote><p>width = 4  height = 5  area = 20</p></blockquote><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。</p><p>这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接执行</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>在python中，类型属于对象，变量是没有类型的：</p><div class="code-wrapper"><pre class="line-numbers language-pytohn" data-language="pytohn"><code class="language-pytohn">a &#x3D; [1 ,2 ,3]a &#x3D; &quot;Python&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>以上代码中,[1,2,3]是List类型，“Python”是String类型，而变量a是没有类型的<br>它只是一个对象的引用（一个指针），以是指向 List 类型对象，也可以是指向 String 类型对象</p><h3 id="可更改-mutable-与不可更改-immutable-对象"><a href="#可更改-mutable-与不可更改-immutable-对象" class="headerlink" title="可更改(mutable)与不可更改(immutable)对象"></a>可更改(mutable)与不可更改(immutable)对象</h3><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p><ul><li>不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a</li><li>可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了<br>python 函数的参数传递：</li><li>不可变类型：类似 C++ 的值传递，如 整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a)）内部修改 a 的值，则是新生成来一个 a。</li><li>可变类型：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响<br>python中一切皆是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</li></ul><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="必须参数"><a href="#必须参数" class="headerlink" title="必须参数"></a>必须参数</h3><p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样<br>例如：调用printme()函数时，你必须传入一个参数，不然会出现语法错误</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> <span class="token builtin">str</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment"># 调用 printme 函数，不加参数会报错</span>printme<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>以上代码的输出结果：</p><blockquote><p>Traceback (most recent call last):<br>  File “test.py”, line 10, in <module><br>    printme()<br>TypeError: printme() missing 1 required positional argument: ‘str’</p></blockquote><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。<br>以下实例在函数 printme() 调用时使用参数名：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> <span class="token builtin">str</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment">#调用printme函数</span>printme<span class="token punctuation">(</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"python"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>以下实例中演示了函数参数的使用不需要使用指定顺序：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"python"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>以上代码输出结果：</p><blockquote><p>名字： python<br>年龄： 25</p></blockquote><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"python"</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"python"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。<br>加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>vartuple<span class="token punctuation">)</span> <span class="token comment"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>输出：<br>70<br>（60，50）</p></blockquote><p>如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">for</span> var <span class="token keyword">in</span> vartuple<span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>var<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>输出:<br>10<br>输出:<br>70<br>60<br>50</p></blockquote><p>还有一种就是参数带两个星号<br>加了两个星号**的参数会以字典的形式导入</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span> <span class="token comment"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>输出结果：</p><blockquote><p>1<br>{‘a’: 2, ‘b’: 3}</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习2-迭代器与生成器</title>
    <link href="/2020/12/17/python2/"/>
    <url>/2020/12/17/python2/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是迭代器"><a href="#什么是迭代器" class="headerlink" title="什么是迭代器"></a>什么是迭代器</h1><p>迭代是Python最强大的功能之一，是访问集合元素的一种方式<br>迭代器是一个可以记住遍历的位置的对象<br>迭代器对象从集合的第一个元素开始访问，知道所有的元素被访问完<br>所以迭代器只能往前不会后退</p><span id="more"></span><p>迭代器有两个基本的方法：</p><ul><li>iter()</li><li>next()</li></ul><p>字符串、列表、元祖对象都可用于创建迭代器</p><p>迭代器对象可以使用for语句进行遍历：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> it<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行以上代码，输出结果如下：</p><blockquote><p>1 2 3 4</p></blockquote><p>也可以使用next()函数</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys         <span class="token comment"># 引入sys模块</span><span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> StopUteration<span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行以上代码，输出结果如下：</p><blockquote><p>1<br>2<br>3<br>4</p></blockquote><h2 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h2><p>把一个类作为一个迭代器使用需要在类中实现两个方法 <strong>iter</strong>() 与 <strong>next</strong>() </p><p>如果你了解过面向对象编程，就知道类都有一个构造函数，Python的构造函数为__init__(),它会在对象初始化的时候执行，<strong>iter</strong>() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <strong>next</strong>() 方法并通过 StopIteration 异常标识迭代的完成<br><strong>next</strong>() 方法会返回下一个迭代器对象。</p><p>通过一个例子来看一看：<br>创建一个返回数字的迭代器，初始值为 1，逐步递增 1</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> self        <span class="token keyword">def</span> <span class="token function">__next_</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>a        self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> x    myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>myiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>myclass<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行输出结果为：</p><blockquote><p>1<br>2<br>3</p></blockquote><h2 id="StopIteration"><a href="#StopIteration" class="headerlink" title="StopIteration"></a>StopIteration</h2><p>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 <strong>next</strong>() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p><p>在 5 次迭代后停止执行：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> self   <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">:</span>      x <span class="token operator">=</span> self<span class="token punctuation">.</span>a      self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> StopIteration myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>myiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>myclass<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> myiter<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果为：</p><blockquote><p>1<br>2<br>3<br>4<br>5</p></blockquote><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。</p><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p><p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p><p>调用一个生成器函数，返回的是一个迭代器对象。</p><p>以下实例使用 yield 实现斐波那契数列：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys <span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 生成器函数 - 斐波那契</span>    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span>        <span class="token keyword">yield</span> a        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        counter <span class="token operator">+=</span> <span class="token number">1</span>f <span class="token operator">=</span> fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># f 是一个迭代器，由生成器返回生成</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>执行结果如下：</p><blockquote><p>0 1 1 2 3 5 8 13 21 34 55</p></blockquote><p>参考（<del>照抄</del>）：<a href="https://www.runoob.com/python3/python3-tutorial.html">Python3教程</a></p>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习1-冒泡排序</title>
    <link href="/2020/12/15/python1/"/>
    <url>/2020/12/15/python1/</url>
    
    <content type="html"><![CDATA[<h2 id="为啥要写冒泡排序"><a href="#为啥要写冒泡排序" class="headerlink" title="为啥要写冒泡排序"></a>为啥要写冒泡排序</h2><p>说到冒泡排序，很多人应该听说过面试手写冒泡的段子吧，面试官仿佛都喜欢问如何进行冒泡排序，好记性不如烂笔头，今天就来说说如何用python进行冒泡排序</p><span id="more"></span><h2 id="冒泡排序的概念"><a href="#冒泡排序的概念" class="headerlink" title="冒泡排序的概念"></a>冒泡排序的概念</h2><p>冒泡排序（Bubble Sort），是一种计算机领域的较简单的排序算法。</p><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><p>这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端，所以叫做“冒泡排序”</p><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>冒泡排序算法的运作如下：</p><ul><li><p>比较相邻的元素。<strong>如果第一个比第二个大，就交换他们两个</strong>。</p></li><li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p></li></ul><h2 id="用python如何实现"><a href="#用python如何实现" class="headerlink" title="用python如何实现"></a>用python如何实现</h2><p>假设现在有一组数</p><p>[64, 34, 25, 12, 22, 11, 90]</p><p>对这组数进行排序</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>     <span class="token comment"># 遍历所有数组元素</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># Last i elements are already in place</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span> bubbleSort<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"排序后的数组:"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>排序后的数组: [11, 12, 22, 25, 34, 64, 90]</p><h2 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort() 排序"></a>sort() 排序</h2><p>但是讲真，python里面排序不用这么麻烦，一个函数搞定：sort()</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Python学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
